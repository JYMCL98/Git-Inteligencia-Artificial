import numpy as np

def hardlim(n):
	if n>0:
		value = 1
	else:
		value = 0

	return value

# a,b,c,d,e,f,g
'''P = [[1,1,1,1,1,1,0],  #0
	 [0,1,1,0,0,0,0],  #1
	 [1,1,0,1,1,0,1],  #2
	 [1,1,1,1,0,0,1],  #3
	 [0,1,1,0,0,1,1],  #4
	 [1,0,1,1,0,1,1],  #5
	 [1,0,1,1,1,1,1],  #6
	 [1,1,1,0,0,0,0],  #7
	 [1,1,1,1,1,1,1],  #8
	 [1,1,1,1,0,1,1]]  #9
'''


P = [[0,0,0,0,0,0,0],  
	 [0,0,0,0,0,0,1],  
	 [0,0,0,0,0,1,0],  
	 [0,0,0,0,0,1,1],  
	 [0,0,0,0,1,0,0],  
	 [0,0,0,0,1,0,1],  
	 [0,0,0,0,1,1,0],  
	 [0,0,0,0,1,1,1],  
	 [0,0,0,1,0,0,0],  
	 [0,0,0,1,0,0,1],
	 [0,0,0,1,0,1,0],  
	 [0,0,0,1,0,1,1],  
	 [0,0,0,1,1,0,0],  
	 [0,0,0,1,1,0,1],  
	 [0,0,0,1,1,1,0],  
	 [0,0,0,1,1,1,1],  
	 [0,0,1,0,0,0,0],  
	 [0,0,1,0,0,0,1],  
	 [0,0,1,0,0,1,0],  
	 [0,0,1,0,0,1,1],
	 [0,0,1,0,1,0,0],  
	 [0,0,1,0,1,0,1], 
	 [0,0,1,0,1,1,0], 
	 [0,0,1,0,1,1,1],  
	 [0,0,1,1,0,0,0],  
	 [0,0,1,1,0,0,1],  
	 [0,0,1,1,0,1,0],  
	 [0,0,1,1,0,1,1],  
	 [0,0,1,1,1,0,0],  
	 [0,0,1,1,1,0,1],
	 [0,0,1,1,1,1,0],  
	 [0,0,1,1,1,1,1], 
	 [0,1,0,0,0,0,0],  
	 [0,1,0,0,0,0,1],  
	 [0,1,0,0,0,1,0], 
	 [0,1,0,0,0,1,1],  
	 [0,1,0,0,1,0,0],  
	 [0,1,0,0,1,0,1],  
	 [0,1,0,0,1,1,0],  
	 [0,1,0,0,1,1,1],
	 [0,1,0,1,0,0,0],  
	 [0,1,0,1,0,0,1],  
	 [0,1,0,1,0,1,0],  
	 [0,1,0,1,0,1,1], 
	 [0,1,0,1,1,0,0],  
	 [0,1,0,1,1,0,1],  
	 [0,1,0,1,1,1,0],  
	 [0,1,0,1,1,1,1],  
	 [0,1,1,0,0,0,0],  #1
	 [0,1,1,0,0,0,1],
	 [0,1,1,0,0,1,0], 
	 [0,1,1,0,0,1,1],  #4
	 [0,1,1,0,1,0,0],  
	 [0,1,1,0,1,0,1],  
	 [0,1,1,0,1,1,0],  
	 [0,1,1,0,1,1,1],  
	 [0,1,1,1,0,0,0],  
	 [0,1,1,1,0,0,1],  
	 [0,1,1,1,0,1,0],  
	 [0,1,1,1,0,1,1],
	 [0,1,1,1,1,0,0],  
	 [0,1,1,1,1,0,1],  
	 [0,1,1,1,1,1,0],  
	 [0,1,1,1,1,1,1],  
	 [1,0,0,0,0,0,0],  
	 [1,0,0,0,0,0,1],  
	 [1,0,0,0,0,1,0],  
	 [1,0,0,0,0,1,1],  
	 [1,0,0,0,1,0,0],  
	 [1,0,0,0,1,0,1],
	 [1,0,0,0,1,1,0],  
	 [1,0,0,0,1,1,1],  
	 [1,0,0,1,0,0,0],  
	 [1,0,0,1,0,0,1],  
	 [1,0,0,1,0,1,0],  
	 [1,0,0,1,0,1,1],  
	 [1,0,0,1,1,0,0],  
	 [1,0,0,1,1,0,1],  
	 [1,0,0,1,1,1,0],  
	 [1,0,0,1,1,1,1],
	 [1,0,1,0,0,0,0],  
	 [1,0,1,0,0,0,1],  
	 [1,0,1,0,0,1,0],  
	 [1,0,1,0,0,1,1],  
	 [1,0,1,0,1,0,0],  
	 [1,0,1,0,1,0,1],  
	 [1,0,1,0,1,1,0],  
	 [1,0,1,0,1,1,1],  
	 [1,0,1,1,0,0,0],  
	 [1,0,1,1,0,0,1],
	 [1,0,1,1,0,1,0],  
	 [1,0,1,1,0,1,1],  #5
	 [1,0,1,1,1,0,0],  
	 [1,0,1,1,1,0,1],  
	 [1,0,1,1,1,1,0],  
	 [1,0,1,1,1,1,1],  #6
	 [1,1,0,0,0,0,0],  
	 [1,1,0,0,0,0,1],  
	 [1,1,0,0,0,1,0],  
	 [1,1,0,0,0,1,1],
	 [1,1,0,0,1,0,0],  
	 [1,1,0,0,1,0,1],  
	 [1,1,0,0,1,1,0],  
	 [1,1,0,0,1,1,1],  
	 [1,1,0,1,0,0,0],  
	 [1,1,0,1,0,0,1],  
	 [1,1,0,1,0,1,0],  
	 [1,1,0,1,0,1,1],  
	 [1,1,0,1,1,0,0],  
	 [1,1,0,1,1,0,1],  #2
	 [1,1,0,1,1,1,0],  
	 [1,1,0,1,1,1,1],  
	 [1,1,1,0,0,0,0],  #7
	 [1,1,1,0,0,0,1],  
	 [1,1,1,0,0,1,0],  
	 [1,1,1,0,0,1,1],  
	 [1,1,1,0,1,0,0],  
	 [1,1,1,0,1,0,1],  
	 [1,1,1,0,1,1,0],  
	 [1,1,1,0,1,1,1],
	 [1,1,1,1,0,0,0],  
	 [1,1,1,1,0,0,1],  #3
	 [1,1,1,1,0,1,0],  
	 [1,1,1,1,0,1,1],  #9
	 [1,1,1,1,1,0,0],  
	 [1,1,1,1,1,0,1],  
	 [1,1,1,1,1,1,0],  #0
	 [1,1,1,1,1,1,1]]  #8


# Valores esperados
t_valid = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,
		   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,
		   0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1]


t_pares = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,
		   0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]


t_mayores_5 = [0,0,0,0,0,0,1,1,1,1]
t_numeros_p = [0,0,1,1,0,1,0,1,0,0]

t = t_valid
e = np.ones(128) # Error

W = 2*np.random.rand(1,7)-1 # Matriz de pesos sinapticos
b = 2*np.random.rand(1)-1  # Vecto de polarizacion


for epocas in range(100):
	for q in range(128):
		a = hardlim(np.dot(W,P[q])+b)
		e[q] = t[q]-a
		W = W+np.dot(e[q],P[q]).T
		b = b+e[q]
		#print(e)

print(e)
print(W)
print(b)
