CCS PCM C Compiler, Version 5.091, 13314               24-oct.-21 19:23

               Filename:   C:\Users\jymcl\Documents\Chapingo\7° semestre\Inteligencia Artificial\Practica 1\pract_1.lst

               ROM used:   582 words (7%)
                           Largest free fragment is 2048
               RAM used:   230 (62%) at main() level
                           241 (65%) worst case
               Stack used: 5 locations
               Stack size: 8

0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0CB
0003:  NOP
.................... #include <pract_1.h>
.................... #include <16F876.h>
.................... //////////// Standard Header file for the PIC16F876 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F876
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=4MHz)
0004:  MOVLW  4B
0005:  MOVWF  04
0006:  BSF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... 
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0079:  MOVLW  0F
007A:  BSF    03.5
007B:  ANDWF  06,W
007C:  IORLW  F0
007D:  MOVWF  06
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
007E:  BCF    03.5
007F:  BSF    06.2
....................    delay_cycles(1);
0080:  NOP
....................    lcd_output_enable(1);
0081:  BSF    06.0
....................    delay_cycles(1);
0082:  NOP
....................    high = lcd_read_nibble();
0083:  CALL   027
0084:  MOVF   78,W
0085:  BSF    03.6
0086:  MOVWF  4F
....................       
....................    lcd_output_enable(0);
0087:  BCF    03.6
0088:  BCF    06.0
....................    delay_cycles(1);
0089:  NOP
....................    lcd_output_enable(1);
008A:  BSF    06.0
....................    delay_us(1);
008B:  NOP
....................    low = lcd_read_nibble();
008C:  CALL   027
008D:  MOVF   78,W
008E:  BSF    03.6
008F:  MOVWF  4E
....................       
....................    lcd_output_enable(0);
0090:  BCF    03.6
0091:  BCF    06.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0092:  MOVLW  0F
0093:  BSF    03.5
0094:  ANDWF  06,W
0095:  MOVWF  06
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0096:  BCF    03.5
0097:  BSF    03.6
0098:  SWAPF  4F,W
0099:  MOVWF  77
009A:  MOVLW  F0
009B:  ANDWF  77,F
009C:  MOVF   77,W
009D:  IORWF  4E,W
009E:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0027:  MOVF   06,W
0028:  MOVWF  77
0029:  SWAPF  06,W
002A:  ANDLW  0F
002B:  MOVWF  78
....................   #endif
002C:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0019:  BSF    03.6
001A:  SWAPF  4F,W
001B:  ANDLW  F0
001C:  MOVWF  77
001D:  MOVLW  0F
001E:  BCF    03.6
001F:  ANDWF  06,W
0020:  IORWF  77,W
0021:  MOVWF  06
....................   #endif
....................       
....................    delay_cycles(1);
0022:  NOP
....................    lcd_output_enable(1);
0023:  BSF    06.0
....................    delay_us(2);
0024:  GOTO   025
....................    lcd_output_enable(0);
0025:  BCF    06.0
0026:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0072:  BSF    03.5
0073:  BCF    03.6
0074:  BCF    06.0
....................    lcd_rs_tris();
0075:  BCF    06.1
....................    lcd_rw_tris();
0076:  BCF    06.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0077:  BCF    03.5
0078:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
009F:  MOVF   78,W
00A0:  MOVWF  4E
00A1:  BTFSS  4E.7
00A2:  GOTO   0A5
00A3:  BCF    03.6
00A4:  GOTO   079
....................    lcd_output_rs(address);
00A5:  BTFSC  4C.0
00A6:  GOTO   0AA
00A7:  BCF    03.6
00A8:  BCF    06.1
00A9:  BSF    03.6
00AA:  BTFSS  4C.0
00AB:  GOTO   0AF
00AC:  BCF    03.6
00AD:  BSF    06.1
00AE:  BSF    03.6
....................    delay_cycles(1);
00AF:  NOP
....................    lcd_output_rw(0);
00B0:  BCF    03.6
00B1:  BCF    06.2
....................    delay_cycles(1);
00B2:  NOP
....................    lcd_output_enable(0);
00B3:  BCF    06.0
....................    lcd_send_nibble(n >> 4);
00B4:  BSF    03.6
00B5:  SWAPF  4D,W
00B6:  MOVWF  4E
00B7:  MOVLW  0F
00B8:  ANDWF  4E,F
00B9:  MOVF   4E,W
00BA:  MOVWF  4F
00BB:  BCF    03.6
00BC:  CALL   019
....................    lcd_send_nibble(n & 0xf);
00BD:  BSF    03.6
00BE:  MOVF   4D,W
00BF:  ANDLW  0F
00C0:  MOVWF  4E
00C1:  MOVWF  4F
00C2:  BCF    03.6
00C3:  CALL   019
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
*
002D:  MOVLW  28
002E:  BSF    03.6
002F:  MOVWF  47
0030:  MOVLW  0C
0031:  MOVWF  48
0032:  MOVLW  01
0033:  MOVWF  49
0034:  MOVLW  06
0035:  MOVWF  4A
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0036:  BCF    03.6
0037:  BCF    06.0
....................    lcd_output_rs(0);
0038:  BCF    06.1
....................    lcd_output_rw(0);
0039:  BCF    06.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
003A:  MOVLW  0F
003B:  BSF    03.5
003C:  ANDWF  06,W
003D:  MOVWF  06
....................   #endif
....................    lcd_enable_tris();
003E:  BCF    06.0
....................    lcd_rs_tris();
003F:  BCF    06.1
....................    lcd_rw_tris();
0040:  BCF    06.2
....................  #endif
....................     
....................    delay_ms(15);
0041:  MOVLW  0F
0042:  BCF    03.5
0043:  BSF    03.6
0044:  MOVWF  4B
0045:  BCF    03.6
0046:  CALL   004
....................    for(i=1;i<=3;++i)
0047:  MOVLW  01
0048:  BSF    03.6
0049:  MOVWF  46
004A:  MOVF   46,W
004B:  SUBLW  03
004C:  BTFSS  03.0
004D:  GOTO   05A
....................    {
....................        lcd_send_nibble(3);
004E:  MOVLW  03
004F:  MOVWF  4F
0050:  BCF    03.6
0051:  CALL   019
....................        delay_ms(5);
0052:  MOVLW  05
0053:  BSF    03.6
0054:  MOVWF  4B
0055:  BCF    03.6
0056:  CALL   004
0057:  BSF    03.6
0058:  INCF   46,F
0059:  GOTO   04A
....................    }
....................    
....................    lcd_send_nibble(2);
005A:  MOVLW  02
005B:  MOVWF  4F
005C:  BCF    03.6
005D:  CALL   019
....................    delay_ms(5);
005E:  MOVLW  05
005F:  BSF    03.6
0060:  MOVWF  4B
0061:  BCF    03.6
0062:  CALL   004
....................    for(i=0;i<=3;++i)
0063:  BSF    03.6
0064:  CLRF   46
0065:  MOVF   46,W
0066:  SUBLW  03
0067:  BTFSS  03.0
0068:  GOTO   0C7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0069:  MOVLW  47
006A:  ADDWF  46,W
006B:  MOVWF  04
006C:  BSF    03.7
006D:  MOVF   00,W
006E:  MOVWF  4B
006F:  CLRF   4C
0070:  MOVF   4B,W
0071:  MOVWF  4D
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
*
00C4:  BSF    03.6
00C5:  INCF   46,F
00C6:  GOTO   065
00C7:  BCF    03.6
00C8:  BCF    0A.3
00C9:  BCF    0A.4
00CA:  GOTO   0D8 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
....................       address=LCD_LINE_TWO;
....................    else
....................       address=0;
....................      
....................    address+=x-1;
....................    lcd_send_byte(0,0x80|address);
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
....................                      delay_ms(2);
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
....................      #endif
....................    }
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #use standard_io(a)
.................... #use standard_io(b)
.................... #use standard_io(c)
.................... 
.................... //variables de entrada
.................... int a0,a1,a2,a3,a4,a5,b3;
.................... //función escalón
.................... int hardlim(float n){
....................    int value;
....................    if(n>0){
....................       value=1;
....................    }
....................    else{
....................       value=0;
....................    }
....................    return value;
.................... }
.................... 
.................... 
.................... void main()
00CB:  MOVF   03,W
00CC:  ANDLW  1F
00CD:  MOVWF  03
00CE:  MOVLW  FF
00CF:  MOVWF  20
00D0:  BSF    03.5
00D1:  BSF    1F.0
00D2:  BSF    1F.1
00D3:  BSF    1F.2
00D4:  BCF    1F.3
00D5:  BCF    03.7
.................... {
....................    lcd_init();//Inicializamos la lcd
00D6:  BCF    03.5
00D7:  GOTO   02D
....................    set_tris_a(0xFF);//dipswitch
00D8:  MOVLW  FF
00D9:  BSF    03.5
00DA:  MOVWF  05
....................    set_tris_b(0b00001000); //rb3=entrada
00DB:  MOVLW  08
00DC:  MOVWF  06
....................    set_tris_c(0x00);//salida a display
00DD:  MOVLW  00
00DE:  MOVWF  07
00DF:  BCF    03.5
00E0:  MOVWF  20
....................    output_b(0x00);
00E1:  BSF    03.5
00E2:  CLRF   06
00E3:  BCF    03.5
00E4:  CLRF   06
....................    output_c(0x00);
00E5:  MOVWF  20
00E6:  BSF    03.5
00E7:  CLRF   07
00E8:  BCF    03.5
00E9:  CLRF   07
....................    output_a(0x00);
00EA:  BSF    03.5
00EB:  CLRF   05
00EC:  BCF    03.5
00ED:  CLRF   05
....................    
....................    a0=0;a1=0;a2=0;a3=0;a4=0;a5=0;b3=0;
00EE:  CLRF   21
00EF:  CLRF   22
00F0:  CLRF   23
00F1:  CLRF   24
00F2:  CLRF   25
00F3:  CLRF   26
00F4:  CLRF   27
....................       
....................    // Números del 0 al 9
....................    //int digitos[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
....................    
....................    // Para el producto punto
....................    int numero_0[7]={1,1,1,1,1,1,0};//0
00F5:  MOVLW  01
00F6:  MOVWF  28
00F7:  MOVWF  29
00F8:  MOVWF  2A
00F9:  MOVWF  2B
00FA:  MOVWF  2C
00FB:  MOVWF  2D
00FC:  CLRF   2E
....................    int numero_1[7]={0,1,1,0,0,0,0};//1
00FD:  CLRF   2F
00FE:  MOVWF  30
00FF:  MOVWF  31
0100:  CLRF   32
0101:  CLRF   33
0102:  CLRF   34
0103:  CLRF   35
....................    int numero_2[7]={1,1,0,1,1,0,1};//2
0104:  MOVWF  36
0105:  MOVWF  37
0106:  CLRF   38
0107:  MOVWF  39
0108:  MOVWF  3A
0109:  CLRF   3B
010A:  MOVWF  3C
....................    int numero_3[7]={1,1,1,1,0,0,1};//3
010B:  MOVWF  3D
010C:  MOVWF  3E
010D:  MOVWF  3F
010E:  MOVWF  40
010F:  CLRF   41
0110:  CLRF   42
0111:  MOVWF  43
....................    int numero_4[7]={0,1,1,0,0,1,1};//4
0112:  CLRF   44
0113:  MOVWF  45
0114:  MOVWF  46
0115:  CLRF   47
0116:  CLRF   48
0117:  MOVWF  49
0118:  MOVWF  4A
....................    int numero_5[7]={1,0,1,1,0,1,1};//5
0119:  MOVWF  4B
011A:  CLRF   4C
011B:  MOVWF  4D
011C:  MOVWF  4E
011D:  CLRF   4F
011E:  MOVWF  50
011F:  MOVWF  51
....................    int numero_6[7]={1,0,1,1,1,1,1};//6
0120:  MOVWF  52
0121:  CLRF   53
0122:  MOVWF  54
0123:  MOVWF  55
0124:  MOVWF  56
0125:  MOVWF  57
0126:  MOVWF  58
....................    int numero_7[7]={1,1,1,0,0,0,0};//7
0127:  MOVWF  59
0128:  MOVWF  5A
0129:  MOVWF  5B
012A:  CLRF   5C
012B:  CLRF   5D
012C:  CLRF   5E
012D:  CLRF   5F
....................    int numero_8[7]={1,1,1,1,1,1,1};//8
012E:  MOVWF  60
012F:  MOVWF  61
0130:  MOVWF  62
0131:  MOVWF  63
0132:  MOVWF  64
0133:  MOVWF  65
0134:  MOVWF  66
....................    int numero_9[7]={1,1,1,1,0,1,1};//9
0135:  MOVWF  67
0136:  MOVWF  68
0137:  MOVWF  69
0138:  MOVWF  6A
0139:  CLRF   6B
013A:  MOVWF  6C
013B:  MOVWF  6D
....................    
....................    // Matriz de pesos sinápticos
....................    // Pares
....................    float W_1[7]={-2.36275721,0.0655979,-1.99657071,-1.56694457,5.66948898,2.24811854,0.37284792};
013C:  MOVLW  80
013D:  BSF    03.5
013E:  MOVWF  20
013F:  MOVLW  97
0140:  MOVWF  21
0141:  MOVLW  37
0142:  MOVWF  22
0143:  MOVLW  6A
0144:  MOVWF  23
0145:  MOVLW  7B
0146:  MOVWF  24
0147:  MOVLW  06
0148:  MOVWF  25
0149:  MOVLW  58
014A:  MOVWF  26
014B:  MOVLW  31
014C:  MOVWF  27
014D:  MOVLW  7F
014E:  MOVWF  28
014F:  MOVLW  FF
0150:  MOVWF  29
0151:  MOVLW  8F
0152:  MOVWF  2A
0153:  MOVLW  A1
0154:  MOVWF  2B
0155:  MOVLW  7F
0156:  MOVWF  2C
0157:  MOVLW  C8
0158:  MOVWF  2D
0159:  MOVLW  91
015A:  MOVWF  2E
015B:  MOVLW  A4
015C:  MOVWF  2F
015D:  MOVLW  81
015E:  MOVWF  30
015F:  MOVLW  35
0160:  MOVWF  31
0161:  MOVLW  6C
0162:  MOVWF  32
0163:  MOVLW  74
0164:  MOVWF  33
0165:  MOVLW  80
0166:  MOVWF  34
0167:  MOVLW  0F
0168:  MOVWF  35
0169:  MOVLW  E1
016A:  MOVWF  36
016B:  MOVLW  2D
016C:  MOVWF  37
016D:  MOVLW  7D
016E:  MOVWF  38
016F:  MOVLW  3E
0170:  MOVWF  39
0171:  MOVLW  E5
0172:  MOVWF  3A
0173:  MOVLW  EC
0174:  MOVWF  3B
....................    // Impares
....................    float W_2[7]={-2.36275721,0.0655979,-1.99657071,-1.56694457,5.66948898,2.24811854,0.37284792};
0175:  MOVLW  80
0176:  MOVWF  3C
0177:  MOVLW  97
0178:  MOVWF  3D
0179:  MOVLW  37
017A:  MOVWF  3E
017B:  MOVLW  6A
017C:  MOVWF  3F
017D:  MOVLW  7B
017E:  MOVWF  40
017F:  MOVLW  06
0180:  MOVWF  41
0181:  MOVLW  58
0182:  MOVWF  42
0183:  MOVLW  31
0184:  MOVWF  43
0185:  MOVLW  7F
0186:  MOVWF  44
0187:  MOVLW  FF
0188:  MOVWF  45
0189:  MOVLW  8F
018A:  MOVWF  46
018B:  MOVLW  A1
018C:  MOVWF  47
018D:  MOVLW  7F
018E:  MOVWF  48
018F:  MOVLW  C8
0190:  MOVWF  49
0191:  MOVLW  91
0192:  MOVWF  4A
0193:  MOVLW  A4
0194:  MOVWF  4B
0195:  MOVLW  81
0196:  MOVWF  4C
0197:  MOVLW  35
0198:  MOVWF  4D
0199:  MOVLW  6C
019A:  MOVWF  4E
019B:  MOVLW  74
019C:  MOVWF  4F
019D:  MOVLW  80
019E:  MOVWF  50
019F:  MOVLW  0F
01A0:  MOVWF  51
01A1:  MOVLW  E1
01A2:  MOVWF  52
01A3:  MOVLW  2D
01A4:  MOVWF  53
01A5:  MOVLW  7D
01A6:  MOVWF  54
01A7:  MOVLW  3E
01A8:  MOVWF  55
01A9:  MOVLW  E5
01AA:  MOVWF  56
01AB:  MOVLW  EC
01AC:  MOVWF  57
....................    // Mayores a 5
....................    float W_3[7]={-2.36275721,0.0655979,-1.99657071,-1.56694457,5.66948898,2.24811854,0.37284792};
01AD:  MOVLW  80
01AE:  BCF    03.5
01AF:  BSF    03.6
01B0:  MOVWF  10
01B1:  MOVLW  97
01B2:  MOVWF  11
01B3:  MOVLW  37
01B4:  MOVWF  12
01B5:  MOVLW  6A
01B6:  MOVWF  13
01B7:  MOVLW  7B
01B8:  MOVWF  14
01B9:  MOVLW  06
01BA:  MOVWF  15
01BB:  MOVLW  58
01BC:  MOVWF  16
01BD:  MOVLW  31
01BE:  MOVWF  17
01BF:  MOVLW  7F
01C0:  MOVWF  18
01C1:  MOVLW  FF
01C2:  MOVWF  19
01C3:  MOVLW  8F
01C4:  MOVWF  1A
01C5:  MOVLW  A1
01C6:  MOVWF  1B
01C7:  MOVLW  7F
01C8:  MOVWF  1C
01C9:  MOVLW  C8
01CA:  MOVWF  1D
01CB:  MOVLW  91
01CC:  MOVWF  1E
01CD:  MOVLW  A4
01CE:  MOVWF  1F
01CF:  MOVLW  81
01D0:  MOVWF  20
01D1:  MOVLW  35
01D2:  MOVWF  21
01D3:  MOVLW  6C
01D4:  MOVWF  22
01D5:  MOVLW  74
01D6:  MOVWF  23
01D7:  MOVLW  80
01D8:  MOVWF  24
01D9:  MOVLW  0F
01DA:  MOVWF  25
01DB:  MOVLW  E1
01DC:  MOVWF  26
01DD:  MOVLW  2D
01DE:  MOVWF  27
01DF:  MOVLW  7D
01E0:  MOVWF  28
01E1:  MOVLW  3E
01E2:  MOVWF  29
01E3:  MOVLW  E5
01E4:  MOVWF  2A
01E5:  MOVLW  EC
01E6:  MOVWF  2B
....................    
....................    //Vector de polarización
....................    float b_1=-0.59955928;  // Pares
....................    float b_2=-0.59955928;  // Impares
....................    float b_3=-0.59955928;  // Mayores a 5
01E7:  MOVLW  B8
01E8:  MOVWF  71
01E9:  MOVLW  7C
01EA:  MOVWF  70
01EB:  MOVLW  99
01EC:  BCF    03.6
01ED:  MOVWF  6F
01EE:  MOVLW  7E
01EF:  MOVWF  6E
01F0:  MOVLW  B8
01F1:  MOVWF  75
01F2:  MOVLW  7C
01F3:  MOVWF  74
01F4:  MOVLW  99
01F5:  MOVWF  73
01F6:  MOVLW  7E
01F7:  MOVWF  72
01F8:  MOVLW  B8
01F9:  MOVWF  7E
01FA:  MOVLW  7C
01FB:  MOVWF  7D
01FC:  MOVLW  99
01FD:  MOVWF  7C
01FE:  MOVLW  7E
01FF:  MOVWF  7B
....................    
....................    while(TRUE)
....................    {
....................       int i,j;
....................       float sum=0;
....................       int perceptron=0;
....................       //leemos la entrada
....................       
....................       int num[7]={0,0,0,0,0,0,0};
0200:  BSF    03.5
0201:  CLRF   5C
0202:  CLRF   5B
0203:  CLRF   5A
0204:  CLRF   59
0205:  CLRF   5D
0206:  CLRF   5E
0207:  CLRF   5F
0208:  CLRF   60
0209:  CLRF   61
020A:  CLRF   62
020B:  CLRF   63
020C:  CLRF   64
....................       
....................       num[0]=input_state(pin_A0);
020D:  CLRF   5E
020E:  BCF    03.5
020F:  BTFSS  05.0
0210:  GOTO   214
0211:  BSF    03.5
0212:  INCF   5E,F
0213:  BCF    03.5
....................       num[1]=input_state(pin_A1);
0214:  BSF    03.5
0215:  CLRF   5F
0216:  BCF    03.5
0217:  BTFSS  05.1
0218:  GOTO   21C
0219:  BSF    03.5
021A:  INCF   5F,F
021B:  BCF    03.5
....................       num[2]=input_state(pin_A2);
021C:  BSF    03.5
021D:  CLRF   60
021E:  BCF    03.5
021F:  BTFSS  05.2
0220:  GOTO   224
0221:  BSF    03.5
0222:  INCF   60,F
0223:  BCF    03.5
....................       num[3]=input_state(pin_A3);
0224:  BSF    03.5
0225:  CLRF   61
0226:  BCF    03.5
0227:  BTFSS  05.3
0228:  GOTO   22C
0229:  BSF    03.5
022A:  INCF   61,F
022B:  BCF    03.5
....................       num[4]=input_state(pin_A4);
022C:  BSF    03.5
022D:  CLRF   62
022E:  BCF    03.5
022F:  BTFSS  05.4
0230:  GOTO   234
0231:  BSF    03.5
0232:  INCF   62,F
0233:  BCF    03.5
....................       num[5]=input_state(pin_A5);
0234:  BSF    03.5
0235:  CLRF   63
0236:  BCF    03.5
0237:  BTFSS  05.5
0238:  GOTO   23C
0239:  BSF    03.5
023A:  INCF   63,F
023B:  BCF    03.5
....................       num[6]=input_state(pin_C7);
023C:  BSF    03.5
023D:  CLRF   64
023E:  BCF    03.5
023F:  BTFSS  07.7
0240:  GOTO   244
0241:  BSF    03.5
0242:  INCF   64,F
0243:  BCF    03.5
0244:  GOTO   200
....................  
....................    }
.................... 
.................... }
.................... 
0245:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
