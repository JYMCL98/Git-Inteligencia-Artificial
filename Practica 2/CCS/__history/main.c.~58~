#include <main.h>

#define P_TCS230 PIN_D5
#define S2 PIN_D6
#define S3 PIN_D7

#define DT1 PIN_C0
#define SCK PIN_C1

//Definimos los pines de la LCD que vamos a ocupar para comodidad
#define LCD_ENABLE_PIN  PIN_B0
#define LCD_RS_PIN      PIN_B1
#define LCD_RW_PIN      PIN_B2
#define LCD_DATA4       PIN_B4
#define LCD_DATA5       PIN_B5
#define LCD_DATA6       PIN_B6
#define LCD_DATA7       PIN_B7

#include<lcd.c>

#use standard_io(a)
//#use standard_io(b)
#use standard_io(c)
#use standard_io(d)

long red = 0;
long green = 0;
long blue = 0;


double SCALE = 54.273;

unsigned int32 readCount(void) {
  unsigned int32 data;
  unsigned int8 j;
  output_bit(DT1, 1);
  output_bit(SCK, 0);
  data = 0;

  while (input(DT1));
  for (j = 0; j < 24; j++) {
    output_bit(SCK, 1);
    data = data << 1;
    output_bit(SCK, 0);
    if (input(DT1)) {
      data++;
    }
  }
  output_bit(SCK, 1);
  data = data ^ 0x800000;
  output_bit(SCK, 0);
  return data;
}




int32 readAverage(void) {
  unsigned int32 sum = 0;
  for (int k = 0; k < 20; k++) {
    sum = sum + readCount();
  }
  sum = sum / 20;
  return sum;
}


void TCS230_init(void)                           // Inicializa el sensor
{
   setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);     // Inicializa el timer 1 con un preescaler de 8
}

void TSC230_clear(void)
{
   output_high(S2);
   output_low(S3);
   while(input_state(P_TCS230)){
   }
   set_timer1(0); 
   while(!input_state(P_TCS230)){
   }
}

int TCS230_getFrequence_red()      // Funcion para obtencion de valores del canal rojo
{
   TSC230_clear();
   unsigned long frequence_red = 0;
   output_low(S2);
   output_low(S3);
   while(input_state(P_TCS230)){
   } 
   set_timer1(0); 
   while(!input_state(P_TCS230)){
   } 
   frequence_red = get_timer1();
   return frequence_red;
}

int TCS230_getFrequence_green()    // Funcion para obtencion de valores del canal verde
{
   TSC230_clear();
   unsigned long frequence_green = 0;
   output_high(S2);
   output_high(S3);
   while(input_state(P_TCS230)){
   } 
   set_timer1(0); 
   while(!input_state(P_TCS230)){
   } 
   frequence_green = get_timer1();
   return frequence_green;
}

int TCS230_getFrequence_blue()     // Funcion para obtencion de valores del canal azul
{
   TSC230_clear();
   unsigned long frequence_blue = 0;
   output_low(S2);
   output_high(S3);
   while(input_state(P_TCS230)){
   } 
   set_timer1(0); 
   while(!input_state(P_TCS230)){
   } 
   frequence_blue = get_timer1();
   return frequence_blue;
}




void main()
{
   //set_tris_a(0xFF);
   //set_tris_b(0x00);
   //set_tris_c(0xFF);
   //set_tris_d(0xFF);

   lcd_init();
   
   printf(lcd_putc, "\f Frutas");
   printf(lcd_putc, "\f");
   delay_ms(2000);
   lcd_gotoxy(1,1);
   printf(lcd_putc,"R:");
   lcd_gotoxy(1,2);
   printf(lcd_putc,"G:");
   lcd_gotoxy(8,1);
   printf(lcd_putc,"B:");
   lcd_gotoxy(8,2);
   printf(lcd_putc, "W:");
   
   unsigned int32 read1 = 0, offset = 0;
   float gram = 0;
   offset = readAverage();
   //delay_ms(5000);
   
   while(TRUE)
   {
      
      
      if (offset >= read1) {
         float val1 = (offset - read1);
         gram = val1;
      }
      else {
         float val2 = (read1 - offset);
         gram = val2;

      }
      
      
      red = TCS230_getFrequence_red();                  // Lectura para el color rojo
      //delay_ms(250);
      green = TCS230_getFrequence_green();              // Lectura para el color verde
      //delay_ms(250);
      blue = TCS230_getFrequence_blue();
      //delay_ms(250);
      //read1 = readAverage();
      
      printf(lcd_putc,"\f");
      lcd_gotoxy(1,1);
      printf(lcd_putc,"R:%Lu", red);
      lcd_gotoxy(1,2);
      printf(lcd_putc,"G:%Lu", green);
      lcd_gotoxy(8,1);
      printf(lcd_putc,"B:%Lu", blue);
      delay_ms(250);
      
      red = TCS230_getFrequence_red();                  // Lectura para el color rojo
      //delay_ms(250);
      green = TCS230_getFrequence_green();              // Lectura para el color verde
      //delay_ms(250);
      blue = TCS230_getFrequence_blue();
      //TODO: User Code
   }

}
