CCS PCH C Compiler, Version 5.091, 13314               18-nov.-21 13:30

               Filename:   C:\Users\jymcl\Documents\Chapingo\7° semestre\Inteligencia Artificial\Nueva carpeta\Prueba.lst

               ROM used:   3942 bytes (12%)
                           Largest free fragment is 28826
               RAM used:   64 (3%) at main() level
                           98 (5%) worst case
               Stack used: 5 locations
               Stack size: 31

0000:  GOTO   0CB0
.................... #include <Prueba.h>
.................... #include <18F4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
0004:  DATA 0C,20
0006:  DATA 42,49
0008:  DATA 45,4E
000A:  DATA 56,45
000C:  DATA 4E,49
000E:  DATA 44,4F
0010:  DATA 20,00
0012:  DATA 0C,20
0014:  DATA 20,20
0016:  DATA 20,20
0018:  DATA 4D,41
001A:  DATA 4E,5A
001C:  DATA 41,4E
001E:  DATA 41,20
0020:  DATA 20,20
0022:  DATA 20,20
0024:  DATA 20,20
0026:  DATA 00,00
0028:  DATA 0C,20
002A:  DATA 20,20
002C:  DATA 20,20
002E:  DATA 50,4C
0030:  DATA 41,54
0032:  DATA 41,4E
0034:  DATA 4F,20
0036:  DATA 20,20
0038:  DATA 20,20
003A:  DATA 20,00
003C:  DATA 0C,20
003E:  DATA 49,6E
0040:  DATA 69,63
0042:  DATA 69,61
0044:  DATA 6E,64
0046:  DATA 6F,2E
0048:  DATA 2E,2E
004A:  DATA 00,00
004C:  DATA 0C,20
004E:  DATA 20,43
0050:  DATA 6F,6C
0052:  DATA 6F,71
0054:  DATA 75,65
0056:  DATA 0A,20
0058:  DATA 20,6C
005A:  DATA 61,20
005C:  DATA 66,72
005E:  DATA 75,74
0060:  DATA 61,00
*
02A0:  TBLRD*+
02A2:  MOVF   FF5,F
02A4:  BZ    02BE
02A6:  MOVFF  FF6,4B
02AA:  MOVFF  FF7,4C
02AE:  MOVFF  FF5,4D
02B2:  RCALL  0250
02B4:  MOVFF  4B,FF6
02B8:  MOVFF  4C,FF7
02BC:  BRA    02A0
02BE:  RETURN 0
*
034E:  BTFSC  FD8.1
0350:  BRA    0358
0352:  CLRF   FEA
0354:  MOVLW  54
0356:  MOVWF  FE9
0358:  CLRF   00
035A:  CLRF   01
035C:  CLRF   02
035E:  CLRF   03
0360:  CLRF   54
0362:  CLRF   55
0364:  CLRF   56
0366:  CLRF   57
0368:  MOVF   53,W
036A:  IORWF  52,W
036C:  IORWF  51,W
036E:  IORWF  50,W
0370:  BZ    03CA
0372:  MOVLW  20
0374:  MOVWF  58
0376:  BCF    FD8.0
0378:  RLCF   4C,F
037A:  RLCF   4D,F
037C:  RLCF   4E,F
037E:  RLCF   4F,F
0380:  RLCF   54,F
0382:  RLCF   55,F
0384:  RLCF   56,F
0386:  RLCF   57,F
0388:  MOVF   53,W
038A:  SUBWF  57,W
038C:  BNZ   039E
038E:  MOVF   52,W
0390:  SUBWF  56,W
0392:  BNZ   039E
0394:  MOVF   51,W
0396:  SUBWF  55,W
0398:  BNZ   039E
039A:  MOVF   50,W
039C:  SUBWF  54,W
039E:  BNC   03BE
03A0:  MOVF   50,W
03A2:  SUBWF  54,F
03A4:  MOVF   51,W
03A6:  BTFSS  FD8.0
03A8:  INCFSZ 51,W
03AA:  SUBWF  55,F
03AC:  MOVF   52,W
03AE:  BTFSS  FD8.0
03B0:  INCFSZ 52,W
03B2:  SUBWF  56,F
03B4:  MOVF   53,W
03B6:  BTFSS  FD8.0
03B8:  INCFSZ 53,W
03BA:  SUBWF  57,F
03BC:  BSF    FD8.0
03BE:  RLCF   00,F
03C0:  RLCF   01,F
03C2:  RLCF   02,F
03C4:  RLCF   03,F
03C6:  DECFSZ 58,F
03C8:  BRA    0376
03CA:  MOVFF  54,FEF
03CE:  MOVFF  55,FEC
03D2:  MOVFF  56,FEC
03D6:  MOVFF  57,FEC
03DA:  RETURN 0
*
0442:  MOVLW  B6
0444:  MOVWF  00
0446:  CLRF   03
0448:  CLRF   02
044A:  CLRF   01
044C:  MOVF   3F,W
044E:  IORWF  40,W
0450:  IORWF  41,W
0452:  IORWF  42,W
0454:  BNZ   045A
0456:  CLRF   00
0458:  BRA    0474
045A:  BCF    FD8.0
045C:  BTFSC  01.7
045E:  BRA    0472
0460:  RLCF   3F,F
0462:  RLCF   40,F
0464:  RLCF   41,F
0466:  RLCF   42,F
0468:  RLCF   03,F
046A:  RLCF   02,F
046C:  RLCF   01,F
046E:  DECFSZ 00,F
0470:  BRA    045A
0472:  BCF    01.7
0474:  RETURN 0
*
050E:  MOVFF  FEA,47
0512:  MOVFF  FE9,46
0516:  SWAPF  40,W
0518:  IORLW  F0
051A:  MOVWF  42
051C:  ADDWF  42,F
051E:  ADDLW  E2
0520:  MOVWF  43
0522:  ADDLW  32
0524:  MOVWF  45
0526:  MOVF   40,W
0528:  ANDLW  0F
052A:  ADDWF  43,F
052C:  ADDWF  43,F
052E:  ADDWF  45,F
0530:  ADDLW  E9
0532:  MOVWF  44
0534:  ADDWF  44,F
0536:  ADDWF  44,F
0538:  SWAPF  3F,W
053A:  ANDLW  0F
053C:  ADDWF  44,F
053E:  ADDWF  45,F
0540:  RLCF   44,F
0542:  RLCF   45,F
0544:  COMF   45,F
0546:  RLCF   45,F
0548:  MOVF   3F,W
054A:  ANDLW  0F
054C:  ADDWF  45,F
054E:  RLCF   42,F
0550:  MOVLW  07
0552:  MOVWF  41
0554:  MOVLW  0A
0556:  DECF   44,F
0558:  ADDWF  45,F
055A:  BNC   0556
055C:  DECF   43,F
055E:  ADDWF  44,F
0560:  BNC   055C
0562:  DECF   42,F
0564:  ADDWF  43,F
0566:  BNC   0562
0568:  DECF   41,F
056A:  ADDWF  42,F
056C:  BNC   0568
056E:  CLRF   FEA
0570:  MOVLW  41
0572:  MOVWF  FE9
0574:  MOVLW  07
0576:  ANDWF  46,W
0578:  BCF    46.6
057A:  ADDWF  FE9,F
057C:  MOVLW  00
057E:  ADDWFC FEA,F
0580:  MOVF   FE9,W
0582:  SUBLW  45
0584:  BNZ   058C
0586:  MOVF   FEA,F
0588:  BNZ   058C
058A:  BSF    46.6
058C:  MOVF   FEF,W
058E:  MOVWF  00
0590:  BNZ   05A2
0592:  BTFSC  46.6
0594:  BRA    05A2
0596:  BTFSC  46.4
0598:  BRA    05C0
059A:  BTFSC  46.3
059C:  BRA    05A2
059E:  MOVLW  20
05A0:  BRA    05A8
05A2:  BSF    46.3
05A4:  BCF    46.4
05A6:  MOVLW  30
05A8:  ADDWF  00,F
05AA:  MOVFF  FEA,40
05AE:  MOVFF  FE9,3F
05B2:  MOVFF  00,4D
05B6:  RCALL  0250
05B8:  MOVFF  40,FEA
05BC:  MOVFF  3F,FE9
05C0:  MOVF   FEE,W
05C2:  BTFSS  46.6
05C4:  BRA    0580
05C6:  RETURN 0
05C8:  MOVF   50,W
05CA:  BTFSC  FD8.2
05CC:  BRA    06B0
05CE:  MOVWF  00
05D0:  MOVF   54,W
05D2:  BTFSC  FD8.2
05D4:  BRA    06B0
05D6:  ADDWF  00,F
05D8:  BNC   05E2
05DA:  MOVLW  81
05DC:  ADDWF  00,F
05DE:  BC    06B0
05E0:  BRA    05EA
05E2:  MOVLW  7F
05E4:  SUBWF  00,F
05E6:  BNC   06B0
05E8:  BZ    06B0
05EA:  MOVFF  51,58
05EE:  MOVF   55,W
05F0:  XORWF  58,F
05F2:  BSF    51.7
05F4:  BSF    55.7
05F6:  MOVF   53,W
05F8:  MULWF  57
05FA:  MOVFF  FF4,5A
05FE:  MOVF   52,W
0600:  MULWF  56
0602:  MOVFF  FF4,03
0606:  MOVFF  FF3,59
060A:  MULWF  57
060C:  MOVF   FF3,W
060E:  ADDWF  5A,F
0610:  MOVF   FF4,W
0612:  ADDWFC 59,F
0614:  MOVLW  00
0616:  ADDWFC 03,F
0618:  MOVF   53,W
061A:  MULWF  56
061C:  MOVF   FF3,W
061E:  ADDWF  5A,F
0620:  MOVF   FF4,W
0622:  ADDWFC 59,F
0624:  MOVLW  00
0626:  CLRF   02
0628:  ADDWFC 03,F
062A:  ADDWFC 02,F
062C:  MOVF   51,W
062E:  MULWF  57
0630:  MOVF   FF3,W
0632:  ADDWF  59,F
0634:  MOVF   FF4,W
0636:  ADDWFC 03,F
0638:  MOVLW  00
063A:  ADDWFC 02,F
063C:  MOVF   51,W
063E:  MULWF  56
0640:  MOVF   FF3,W
0642:  ADDWF  03,F
0644:  MOVF   FF4,W
0646:  ADDWFC 02,F
0648:  MOVLW  00
064A:  CLRF   01
064C:  ADDWFC 01,F
064E:  MOVF   53,W
0650:  MULWF  55
0652:  MOVF   FF3,W
0654:  ADDWF  59,F
0656:  MOVF   FF4,W
0658:  ADDWFC 03,F
065A:  MOVLW  00
065C:  ADDWFC 02,F
065E:  ADDWFC 01,F
0660:  MOVF   52,W
0662:  MULWF  55
0664:  MOVF   FF3,W
0666:  ADDWF  03,F
0668:  MOVF   FF4,W
066A:  ADDWFC 02,F
066C:  MOVLW  00
066E:  ADDWFC 01,F
0670:  MOVF   51,W
0672:  MULWF  55
0674:  MOVF   FF3,W
0676:  ADDWF  02,F
0678:  MOVF   FF4,W
067A:  ADDWFC 01,F
067C:  INCF   00,F
067E:  BTFSC  01.7
0680:  BRA    068C
0682:  RLCF   59,F
0684:  RLCF   03,F
0686:  RLCF   02,F
0688:  RLCF   01,F
068A:  DECF   00,F
068C:  MOVLW  00
068E:  BTFSS  59.7
0690:  BRA    06A6
0692:  INCF   03,F
0694:  ADDWFC 02,F
0696:  ADDWFC 01,F
0698:  MOVF   01,W
069A:  BNZ   06A6
069C:  MOVF   02,W
069E:  BNZ   06A6
06A0:  MOVF   03,W
06A2:  BNZ   06A6
06A4:  INCF   00,F
06A6:  BTFSC  58.7
06A8:  BSF    01.7
06AA:  BTFSS  58.7
06AC:  BCF    01.7
06AE:  BRA    06B8
06B0:  CLRF   00
06B2:  CLRF   01
06B4:  CLRF   02
06B6:  CLRF   03
06B8:  RETURN 0
06BA:  MOVF   4C,W
06BC:  SUBLW  B6
06BE:  MOVWF  4C
06C0:  CLRF   03
06C2:  MOVFF  4D,50
06C6:  BSF    4D.7
06C8:  BCF    FD8.0
06CA:  RRCF   4D,F
06CC:  RRCF   4E,F
06CE:  RRCF   4F,F
06D0:  RRCF   03,F
06D2:  RRCF   02,F
06D4:  RRCF   01,F
06D6:  RRCF   00,F
06D8:  DECFSZ 4C,F
06DA:  BRA    06C8
06DC:  BTFSS  50.7
06DE:  BRA    06F6
06E0:  COMF   00,F
06E2:  COMF   01,F
06E4:  COMF   02,F
06E6:  COMF   03,F
06E8:  INCF   00,F
06EA:  BTFSC  FD8.2
06EC:  INCF   01,F
06EE:  BTFSC  FD8.2
06F0:  INCF   02,F
06F2:  BTFSC  FD8.2
06F4:  INCF   03,F
06F6:  GOTO   0748 (RETURN)
06FA:  MOVF   FE9,W
06FC:  MOVWF  44
06FE:  MOVF   43,W
0700:  MOVWF  46
0702:  BZ    0736
0704:  MOVFF  42,53
0708:  MOVFF  41,52
070C:  MOVFF  40,51
0710:  MOVFF  3F,50
0714:  CLRF   57
0716:  CLRF   56
0718:  MOVLW  20
071A:  MOVWF  55
071C:  MOVLW  82
071E:  MOVWF  54
0720:  RCALL  05C8
0722:  MOVFF  03,42
0726:  MOVFF  02,41
072A:  MOVFF  01,40
072E:  MOVFF  00,3F
0732:  DECFSZ 46,F
0734:  BRA    0704
0736:  MOVFF  42,4F
073A:  MOVFF  41,4E
073E:  MOVFF  40,4D
0742:  MOVFF  3F,4C
0746:  BRA    06BA
0748:  MOVFF  03,42
074C:  MOVFF  02,41
0750:  MOVFF  01,40
0754:  MOVFF  00,3F
0758:  BTFSS  42.7
075A:  BRA    0776
075C:  DECF   44,F
075E:  BSF    44.5
0760:  COMF   3F,F
0762:  COMF   40,F
0764:  COMF   41,F
0766:  COMF   42,F
0768:  INCF   3F,F
076A:  BTFSC  FD8.2
076C:  INCF   40,F
076E:  BTFSC  FD8.2
0770:  INCF   41,F
0772:  BTFSC  FD8.2
0774:  INCF   42,F
0776:  MOVLW  3B
0778:  MOVWF  4B
077A:  MOVLW  9A
077C:  MOVWF  4A
077E:  MOVLW  CA
0780:  MOVWF  49
0782:  CLRF   48
0784:  MOVLW  0A
0786:  MOVWF  46
0788:  MOVF   43,W
078A:  BTFSC  FD8.2
078C:  INCF   44,F
078E:  BSF    FD8.1
0790:  CLRF   FEA
0792:  MOVLW  3F
0794:  MOVWF  FE9
0796:  MOVFF  42,4F
079A:  MOVFF  41,4E
079E:  MOVFF  40,4D
07A2:  MOVFF  3F,4C
07A6:  MOVFF  4B,53
07AA:  MOVFF  4A,52
07AE:  MOVFF  49,51
07B2:  MOVFF  48,50
07B6:  RCALL  034E
07B8:  MOVF   01,W
07BA:  MOVF   00,F
07BC:  BNZ   07DC
07BE:  INCF   43,W
07C0:  SUBWF  46,W
07C2:  BZ    07DC
07C4:  MOVF   44,W
07C6:  BZ    07E0
07C8:  ANDLW  0F
07CA:  SUBWF  46,W
07CC:  BZ    07D0
07CE:  BC    083E
07D0:  BTFSC  44.7
07D2:  BRA    083E
07D4:  BTFSC  44.6
07D6:  BRA    07E0
07D8:  MOVLW  20
07DA:  BRA    0836
07DC:  MOVLW  20
07DE:  ANDWF  44,F
07E0:  BTFSS  44.5
07E2:  BRA    07FC
07E4:  BCF    44.5
07E6:  MOVF   43,W
07E8:  BTFSS  FD8.2
07EA:  DECF   44,F
07EC:  MOVF   00,W
07EE:  MOVWF  44
07F0:  MOVLW  2D
07F2:  MOVWF  4D
07F4:  RCALL  0250
07F6:  MOVF   44,W
07F8:  MOVWF  00
07FA:  CLRF   44
07FC:  MOVF   43,W
07FE:  SUBWF  46,W
0800:  BNZ   0816
0802:  MOVF   00,W
0804:  MOVWF  44
0806:  MOVLW  2E
0808:  MOVWF  4D
080A:  RCALL  0250
080C:  MOVF   44,W
080E:  MOVWF  00
0810:  MOVLW  20
0812:  ANDWF  44,F
0814:  MOVLW  00
0816:  MOVLW  30
0818:  BTFSS  44.5
081A:  BRA    0836
081C:  BCF    44.5
081E:  MOVF   43,W
0820:  BTFSS  FD8.2
0822:  DECF   44,F
0824:  MOVF   00,W
0826:  MOVWF  44
0828:  MOVLW  2D
082A:  MOVWF  4D
082C:  RCALL  0250
082E:  MOVF   44,W
0830:  MOVWF  00
0832:  CLRF   44
0834:  MOVLW  30
0836:  ADDWF  00,F
0838:  MOVFF  00,4D
083C:  RCALL  0250
083E:  BCF    FD8.1
0840:  MOVFF  4B,4F
0844:  MOVFF  4A,4E
0848:  MOVFF  49,4D
084C:  MOVFF  48,4C
0850:  CLRF   53
0852:  CLRF   52
0854:  CLRF   51
0856:  MOVLW  0A
0858:  MOVWF  50
085A:  RCALL  034E
085C:  MOVFF  03,4B
0860:  MOVFF  02,4A
0864:  MOVFF  01,49
0868:  MOVFF  00,48
086C:  DECFSZ 46,F
086E:  BRA    078E
0870:  GOTO   0F34 (RETURN)
0874:  MOVLW  8E
0876:  MOVWF  00
0878:  MOVFF  51,01
087C:  MOVFF  50,02
0880:  CLRF   03
0882:  MOVF   01,F
0884:  BNZ   0898
0886:  MOVFF  02,01
088A:  CLRF   02
088C:  MOVLW  08
088E:  SUBWF  00,F
0890:  MOVF   01,F
0892:  BNZ   0898
0894:  CLRF   00
0896:  BRA    08A8
0898:  BCF    FD8.0
089A:  BTFSC  01.7
089C:  BRA    08A6
089E:  RLCF   02,F
08A0:  RLCF   01,F
08A2:  DECF   00,F
08A4:  BRA    0898
08A6:  BCF    01.7
08A8:  GOTO   0BC6 (RETURN)
08AC:  MOVLW  80
08AE:  BTFSC  FD8.1
08B0:  XORWF  57,F
08B2:  CLRF   5C
08B4:  CLRF   5D
08B6:  MOVFF  53,5B
08BA:  MOVF   57,W
08BC:  XORWF  5B,F
08BE:  MOVF   52,W
08C0:  BTFSC  FD8.2
08C2:  BRA    0A7C
08C4:  MOVWF  5A
08C6:  MOVWF  00
08C8:  MOVF   56,W
08CA:  BTFSC  FD8.2
08CC:  BRA    0A8E
08CE:  SUBWF  5A,F
08D0:  BTFSC  FD8.2
08D2:  BRA    09D6
08D4:  BNC   0950
08D6:  MOVFF  57,60
08DA:  BSF    x60.7
08DC:  MOVFF  58,5F
08E0:  MOVFF  59,5E
08E4:  CLRF   5D
08E6:  BCF    FD8.0
08E8:  RRCF   x60,F
08EA:  RRCF   5F,F
08EC:  RRCF   5E,F
08EE:  RRCF   5D,F
08F0:  DECFSZ 5A,F
08F2:  BRA    08E4
08F4:  BTFSS  5B.7
08F6:  BRA    08FE
08F8:  BSF    5C.0
08FA:  BRA    0AB6
08FC:  BCF    5C.0
08FE:  BCF    5A.0
0900:  BSF    5C.4
0902:  CLRF   FEA
0904:  MOVLW  55
0906:  MOVWF  FE9
0908:  BRA    0ADC
090A:  BCF    5C.4
090C:  BTFSC  5B.7
090E:  BRA    0924
0910:  BTFSS  5A.0
0912:  BRA    093A
0914:  RRCF   x60,F
0916:  RRCF   5F,F
0918:  RRCF   5E,F
091A:  RRCF   5D,F
091C:  INCF   00,F
091E:  BTFSC  FD8.2
0920:  BRA    0AAC
0922:  BRA    093A
0924:  BTFSC  x60.7
0926:  BRA    0940
0928:  BCF    FD8.0
092A:  RLCF   5D,F
092C:  RLCF   5E,F
092E:  RLCF   5F,F
0930:  RLCF   x60,F
0932:  DECF   00,F
0934:  BTFSC  FD8.2
0936:  BRA    0AAC
0938:  BRA    0924
093A:  BSF    5C.6
093C:  BRA    0A14
093E:  BCF    5C.6
0940:  MOVFF  53,5B
0944:  BTFSS  53.7
0946:  BRA    094C
0948:  BSF    x60.7
094A:  BRA    0A9E
094C:  BCF    x60.7
094E:  BRA    0A9E
0950:  MOVFF  56,5A
0954:  MOVFF  56,00
0958:  MOVF   52,W
095A:  SUBWF  5A,F
095C:  MOVFF  53,60
0960:  BSF    x60.7
0962:  MOVFF  54,5F
0966:  MOVFF  55,5E
096A:  CLRF   5D
096C:  BCF    FD8.0
096E:  RRCF   x60,F
0970:  RRCF   5F,F
0972:  RRCF   5E,F
0974:  RRCF   5D,F
0976:  DECFSZ 5A,F
0978:  BRA    096A
097A:  BTFSS  5B.7
097C:  BRA    0984
097E:  BSF    5C.1
0980:  BRA    0AB6
0982:  BCF    5C.1
0984:  BCF    5A.0
0986:  BSF    5C.5
0988:  CLRF   FEA
098A:  MOVLW  59
098C:  MOVWF  FE9
098E:  BRA    0ADC
0990:  BCF    5C.5
0992:  BTFSC  5B.7
0994:  BRA    09AA
0996:  BTFSS  5A.0
0998:  BRA    09C0
099A:  RRCF   x60,F
099C:  RRCF   5F,F
099E:  RRCF   5E,F
09A0:  RRCF   5D,F
09A2:  INCF   00,F
09A4:  BTFSC  FD8.2
09A6:  BRA    0AAC
09A8:  BRA    09C0
09AA:  BTFSC  x60.7
09AC:  BRA    09C6
09AE:  BCF    FD8.0
09B0:  RLCF   5D,F
09B2:  RLCF   5E,F
09B4:  RLCF   5F,F
09B6:  RLCF   x60,F
09B8:  DECF   00,F
09BA:  BTFSC  FD8.2
09BC:  BRA    0AAC
09BE:  BRA    09AA
09C0:  BSF    5C.7
09C2:  BRA    0A14
09C4:  BCF    5C.7
09C6:  MOVFF  57,5B
09CA:  BTFSS  57.7
09CC:  BRA    09D2
09CE:  BSF    x60.7
09D0:  BRA    0A9E
09D2:  BCF    x60.7
09D4:  BRA    0A9E
09D6:  MOVFF  57,60
09DA:  BSF    x60.7
09DC:  MOVFF  58,5F
09E0:  MOVFF  59,5E
09E4:  BTFSS  5B.7
09E6:  BRA    09F0
09E8:  BCF    x60.7
09EA:  BSF    5C.2
09EC:  BRA    0AB6
09EE:  BCF    5C.2
09F0:  CLRF   5D
09F2:  BCF    5A.0
09F4:  CLRF   FEA
09F6:  MOVLW  55
09F8:  MOVWF  FE9
09FA:  BRA    0ADC
09FC:  BTFSC  5B.7
09FE:  BRA    0A38
0A00:  MOVFF  53,5B
0A04:  BTFSS  5A.0
0A06:  BRA    0A14
0A08:  RRCF   x60,F
0A0A:  RRCF   5F,F
0A0C:  RRCF   5E,F
0A0E:  RRCF   5D,F
0A10:  INCF   00,F
0A12:  BZ    0AAC
0A14:  BTFSS  5D.7
0A16:  BRA    0A2E
0A18:  INCF   5E,F
0A1A:  BNZ   0A2E
0A1C:  INCF   5F,F
0A1E:  BNZ   0A2E
0A20:  INCF   x60,F
0A22:  BNZ   0A2E
0A24:  RRCF   x60,F
0A26:  RRCF   5F,F
0A28:  RRCF   5E,F
0A2A:  INCF   00,F
0A2C:  BZ    0AAC
0A2E:  BTFSC  5C.6
0A30:  BRA    093E
0A32:  BTFSC  5C.7
0A34:  BRA    09C4
0A36:  BRA    0A70
0A38:  MOVLW  80
0A3A:  XORWF  x60,F
0A3C:  BTFSS  x60.7
0A3E:  BRA    0A48
0A40:  BRA    0AB6
0A42:  MOVFF  57,5B
0A46:  BRA    0A5C
0A48:  MOVFF  53,5B
0A4C:  MOVF   x60,F
0A4E:  BNZ   0A5C
0A50:  MOVF   5F,F
0A52:  BNZ   0A5C
0A54:  MOVF   5E,F
0A56:  BNZ   0A5C
0A58:  CLRF   00
0A5A:  BRA    0A9E
0A5C:  BTFSC  x60.7
0A5E:  BRA    0A70
0A60:  BCF    FD8.0
0A62:  RLCF   5D,F
0A64:  RLCF   5E,F
0A66:  RLCF   5F,F
0A68:  RLCF   x60,F
0A6A:  DECFSZ 00,F
0A6C:  BRA    0A5C
0A6E:  BRA    0AAC
0A70:  BTFSS  5B.7
0A72:  BRA    0A78
0A74:  BSF    x60.7
0A76:  BRA    0A9E
0A78:  BCF    x60.7
0A7A:  BRA    0A9E
0A7C:  MOVFF  56,00
0A80:  MOVFF  57,60
0A84:  MOVFF  58,5F
0A88:  MOVFF  59,5E
0A8C:  BRA    0A9E
0A8E:  MOVFF  52,00
0A92:  MOVFF  53,60
0A96:  MOVFF  54,5F
0A9A:  MOVFF  55,5E
0A9E:  MOVFF  60,01
0AA2:  MOVFF  5F,02
0AA6:  MOVFF  5E,03
0AAA:  BRA    0B14
0AAC:  CLRF   00
0AAE:  CLRF   01
0AB0:  CLRF   02
0AB2:  CLRF   03
0AB4:  BRA    0B14
0AB6:  CLRF   5D
0AB8:  COMF   5E,F
0ABA:  COMF   5F,F
0ABC:  COMF   x60,F
0ABE:  COMF   5D,F
0AC0:  INCF   5D,F
0AC2:  BNZ   0ACE
0AC4:  INCF   5E,F
0AC6:  BNZ   0ACE
0AC8:  INCF   5F,F
0ACA:  BNZ   0ACE
0ACC:  INCF   x60,F
0ACE:  BTFSC  5C.0
0AD0:  BRA    08FC
0AD2:  BTFSC  5C.1
0AD4:  BRA    0982
0AD6:  BTFSC  5C.2
0AD8:  BRA    09EE
0ADA:  BRA    0A42
0ADC:  MOVF   FEF,W
0ADE:  ADDWF  5E,F
0AE0:  BNC   0AEC
0AE2:  INCF   5F,F
0AE4:  BNZ   0AEC
0AE6:  INCF   x60,F
0AE8:  BTFSC  FD8.2
0AEA:  BSF    5A.0
0AEC:  MOVF   FED,F
0AEE:  MOVF   FEF,W
0AF0:  ADDWF  5F,F
0AF2:  BNC   0AFA
0AF4:  INCF   x60,F
0AF6:  BTFSC  FD8.2
0AF8:  BSF    5A.0
0AFA:  MOVF   FED,F
0AFC:  MOVF   FEF,W
0AFE:  BTFSC  FEF.7
0B00:  BRA    0B04
0B02:  XORLW  80
0B04:  ADDWF  x60,F
0B06:  BTFSC  FD8.0
0B08:  BSF    5A.0
0B0A:  BTFSC  5C.4
0B0C:  BRA    090A
0B0E:  BTFSC  5C.5
0B10:  BRA    0990
0B12:  BRA    09FC
0B14:  RETURN 0
0B16:  MOVLW  8E
0B18:  MOVWF  00
0B1A:  MOVF   4B,W
0B1C:  SUBWF  00,F
0B1E:  MOVFF  4C,02
0B22:  MOVFF  4D,01
0B26:  BSF    02.7
0B28:  MOVF   00,F
0B2A:  BZ    0B3E
0B2C:  BCF    FD8.0
0B2E:  MOVF   02,F
0B30:  BNZ   0B36
0B32:  MOVF   01,F
0B34:  BZ    0B3E
0B36:  RRCF   02,F
0B38:  RRCF   01,F
0B3A:  DECFSZ 00,F
0B3C:  BRA    0B2C
0B3E:  BTFSS  4C.7
0B40:  BRA    0B4C
0B42:  COMF   01,F
0B44:  COMF   02,F
0B46:  INCF   01,F
0B48:  BTFSC  FD8.2
0B4A:  INCF   02,F
0B4C:  GOTO   0C66 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=4MHz)
*
0062:  CLRF   FEA
0064:  MOVLW  4E
0066:  MOVWF  FE9
0068:  MOVF   FEF,W
006A:  BZ    0088
006C:  MOVLW  01
006E:  MOVWF  01
0070:  CLRF   00
0072:  DECFSZ 00,F
0074:  BRA    0072
0076:  DECFSZ 01,F
0078:  BRA    0070
007A:  MOVLW  4A
007C:  MOVWF  00
007E:  DECFSZ 00,F
0080:  BRA    007E
0082:  BRA    0084
0084:  DECFSZ FEF,F
0086:  BRA    006C
0088:  RETURN 0
.................... 
.................... 
.................... 
.................... //sensor de color
.................... #define P_TCS230 PIN_D5 //OUT
.................... #define S2 PIN_D6//S2
.................... #define S3 PIN_D7//S3
.................... //galga
.................... #define DT1 PIN_C0
.................... #define SCK PIN_C1
.................... //Definimos los pines de la LCD
.................... #define LCD_ENABLE_PIN  PIN_B0                                  
.................... #define LCD_RS_PIN      PIN_B1                               
.................... #define LCD_RW_PIN      PIN_B2                                
.................... #define LCD_DATA4       PIN_B4                               
.................... #define LCD_DATA5       PIN_B5
.................... #define LCD_DATA6       PIN_B6                          
.................... #define LCD_DATA7       PIN_B7
.................... // Incluímos la librería de la LCD
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
011A:  BSF    F93.4
....................    output_float(LCD_DATA5);
011C:  BSF    F93.5
....................    output_float(LCD_DATA6);
011E:  BSF    F93.6
....................    output_float(LCD_DATA7);
0120:  BSF    F93.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0122:  BSF    F8A.2
0124:  BCF    F93.2
....................    delay_cycles(1);
0126:  NOP   
....................    lcd_output_enable(1);
0128:  BSF    F8A.0
012A:  BCF    F93.0
....................    delay_cycles(1);
012C:  NOP   
....................    high = lcd_read_nibble();
012E:  RCALL  00C8
0130:  MOVFF  01,55
....................       
....................    lcd_output_enable(0);
0134:  BCF    F8A.0
0136:  BCF    F93.0
....................    delay_cycles(1);
0138:  NOP   
....................    lcd_output_enable(1);
013A:  BSF    F8A.0
013C:  BCF    F93.0
....................    delay_us(1);
013E:  NOP   
....................    low = lcd_read_nibble();
0140:  RCALL  00C8
0142:  MOVFF  01,54
....................       
....................    lcd_output_enable(0);
0146:  BCF    F8A.0
0148:  BCF    F93.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
014A:  BCF    F93.4
....................    output_drive(LCD_DATA5);
014C:  BCF    F93.5
....................    output_drive(LCD_DATA6);
014E:  BCF    F93.6
....................    output_drive(LCD_DATA7);
0150:  BCF    F93.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0152:  SWAPF  55,W
0154:  MOVWF  00
0156:  MOVLW  F0
0158:  ANDWF  00,F
015A:  MOVF   00,W
015C:  IORWF  54,W
015E:  MOVWF  01
0160:  GOTO   0170 (RETURN)
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
00C8:  CLRF   56
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
00CA:  BSF    F93.4
00CC:  MOVLW  00
00CE:  BTFSC  F81.4
00D0:  MOVLW  01
00D2:  IORWF  56,F
....................    n |= input(LCD_DATA5) << 1;
00D4:  BSF    F93.5
00D6:  MOVLW  00
00D8:  BTFSC  F81.5
00DA:  MOVLW  01
00DC:  MOVWF  00
00DE:  BCF    FD8.0
00E0:  RLCF   00,F
00E2:  MOVF   00,W
00E4:  IORWF  56,F
....................    n |= input(LCD_DATA6) << 2;
00E6:  BSF    F93.6
00E8:  MOVLW  00
00EA:  BTFSC  F81.6
00EC:  MOVLW  01
00EE:  MOVWF  00
00F0:  RLCF   00,F
00F2:  RLCF   00,F
00F4:  MOVLW  FC
00F6:  ANDWF  00,F
00F8:  MOVF   00,W
00FA:  IORWF  56,F
....................    n |= input(LCD_DATA7) << 3;
00FC:  BSF    F93.7
00FE:  MOVLW  00
0100:  BTFSC  F81.7
0102:  MOVLW  01
0104:  MOVWF  00
0106:  RLCF   00,F
0108:  RLCF   00,F
010A:  RLCF   00,F
010C:  MOVLW  F8
010E:  ANDWF  00,F
0110:  MOVF   00,W
0112:  IORWF  56,F
....................    
....................    return(n);
0114:  MOVFF  56,01
....................   #else
0118:  RETURN 0
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
008A:  BTFSC  55.0
008C:  BRA    0092
008E:  BCF    F8A.4
0090:  BRA    0094
0092:  BSF    F8A.4
0094:  BCF    F93.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0096:  BTFSC  55.1
0098:  BRA    009E
009A:  BCF    F8A.5
009C:  BRA    00A0
009E:  BSF    F8A.5
00A0:  BCF    F93.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
00A2:  BTFSC  55.2
00A4:  BRA    00AA
00A6:  BCF    F8A.6
00A8:  BRA    00AC
00AA:  BSF    F8A.6
00AC:  BCF    F93.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
00AE:  BTFSC  55.3
00B0:  BRA    00B6
00B2:  BCF    F8A.7
00B4:  BRA    00B8
00B6:  BSF    F8A.7
00B8:  BCF    F93.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
00BA:  NOP   
....................    lcd_output_enable(1);
00BC:  BSF    F8A.0
00BE:  BCF    F93.0
....................    delay_us(2);
00C0:  BRA    00C2
....................    lcd_output_enable(0);
00C2:  BCF    F8A.0
00C4:  BCF    F93.0
00C6:  RETURN 0
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0164:  BCF    F93.0
....................    lcd_rs_tris();
0166:  BCF    F93.1
....................    lcd_rw_tris();
0168:  BCF    F93.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
016A:  BCF    F8A.1
016C:  BCF    F93.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
016E:  BRA    011A
0170:  MOVFF  01,54
0174:  BTFSC  01.7
0176:  BRA    016E
....................    lcd_output_rs(address);
0178:  MOVF   52,F
017A:  BNZ   0180
017C:  BCF    F8A.1
017E:  BRA    0182
0180:  BSF    F8A.1
0182:  BCF    F93.1
....................    delay_cycles(1);
0184:  NOP   
....................    lcd_output_rw(0);
0186:  BCF    F8A.2
0188:  BCF    F93.2
....................    delay_cycles(1);
018A:  NOP   
....................    lcd_output_enable(0);
018C:  BCF    F8A.0
018E:  BCF    F93.0
....................    lcd_send_nibble(n >> 4);
0190:  SWAPF  53,W
0192:  MOVWF  54
0194:  MOVLW  0F
0196:  ANDWF  54,F
0198:  MOVFF  54,55
019C:  RCALL  008A
....................    lcd_send_nibble(n & 0xf);
019E:  MOVF   53,W
01A0:  ANDLW  0F
01A2:  MOVWF  54
01A4:  MOVWF  55
01A6:  RCALL  008A
01A8:  RETURN 0
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
01AA:  MOVLW  28
01AC:  MOVWF  40
01AE:  MOVLW  0C
01B0:  MOVWF  41
01B2:  MOVLW  01
01B4:  MOVWF  42
01B6:  MOVLW  06
01B8:  MOVWF  43
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
01BA:  BCF    F8A.0
01BC:  BCF    F93.0
....................    lcd_output_rs(0);
01BE:  BCF    F8A.1
01C0:  BCF    F93.1
....................    lcd_output_rw(0);
01C2:  BCF    F8A.2
01C4:  BCF    F93.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
01C6:  BCF    F93.4
....................    output_drive(LCD_DATA5);
01C8:  BCF    F93.5
....................    output_drive(LCD_DATA6);
01CA:  BCF    F93.6
....................    output_drive(LCD_DATA7);
01CC:  BCF    F93.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
01CE:  BCF    F93.0
....................    lcd_rs_tris();
01D0:  BCF    F93.1
....................    lcd_rw_tris();
01D2:  BCF    F93.2
....................  #endif
....................     
....................    delay_ms(15);
01D4:  MOVLW  0F
01D6:  MOVWF  4E
01D8:  RCALL  0062
....................    for(i=1;i<=3;++i)
01DA:  MOVLW  01
01DC:  MOVWF  3F
01DE:  MOVF   3F,W
01E0:  SUBLW  03
01E2:  BNC   01F4
....................    {
....................        lcd_send_nibble(3);
01E4:  MOVLW  03
01E6:  MOVWF  55
01E8:  RCALL  008A
....................        delay_ms(5);
01EA:  MOVLW  05
01EC:  MOVWF  4E
01EE:  RCALL  0062
01F0:  INCF   3F,F
01F2:  BRA    01DE
....................    }
....................    
....................    lcd_send_nibble(2);
01F4:  MOVLW  02
01F6:  MOVWF  55
01F8:  RCALL  008A
....................    delay_ms(5);
01FA:  MOVLW  05
01FC:  MOVWF  4E
01FE:  RCALL  0062
....................    for(i=0;i<=3;++i)
0200:  CLRF   3F
0202:  MOVF   3F,W
0204:  SUBLW  03
0206:  BNC   0222
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0208:  CLRF   03
020A:  MOVF   3F,W
020C:  ADDLW  40
020E:  MOVWF  FE9
0210:  MOVLW  00
0212:  ADDWFC 03,W
0214:  MOVWF  FEA
0216:  MOVFF  FEF,53
021A:  CLRF   52
021C:  RCALL  0164
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
021E:  INCF   3F,F
0220:  BRA    0202
0222:  GOTO   0D1E (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
022E:  DECFSZ 4F,W
0230:  BRA    0234
0232:  BRA    023A
....................       address=LCD_LINE_TWO;
0234:  MOVLW  40
0236:  MOVWF  50
0238:  BRA    023C
....................    else
....................       address=0;
023A:  CLRF   50
....................      
....................    address+=x-1;
023C:  MOVLW  01
023E:  SUBWF  4E,W
0240:  ADDWF  50,F
....................    lcd_send_byte(0,0x80|address);
0242:  MOVF   50,W
0244:  IORLW  80
0246:  MOVWF  51
0248:  CLRF   52
024A:  MOVWF  53
024C:  RCALL  0164
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
024E:  RETURN 0
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0250:  MOVF   4D,W
0252:  XORLW  07
0254:  BZ    0264
0256:  XORLW  0B
0258:  BZ    026E
025A:  XORLW  06
025C:  BZ    027E
025E:  XORLW  02
0260:  BZ    028A
0262:  BRA    0294
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0264:  MOVLW  01
0266:  MOVWF  4E
0268:  MOVWF  4F
026A:  RCALL  022E
026C:  BRA    029E
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
026E:  CLRF   52
0270:  MOVLW  01
0272:  MOVWF  53
0274:  RCALL  0164
....................                      delay_ms(2);
0276:  MOVLW  02
0278:  MOVWF  4E
027A:  RCALL  0062
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
027C:  BRA    029E
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
027E:  MOVLW  01
0280:  MOVWF  4E
0282:  MOVLW  02
0284:  MOVWF  4F
0286:  RCALL  022E
0288:  BRA    029E
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
028A:  CLRF   52
028C:  MOVLW  10
028E:  MOVWF  53
0290:  RCALL  0164
0292:  BRA    029E
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0294:  MOVLW  01
0296:  MOVWF  52
0298:  MOVFF  4D,53
029C:  RCALL  0164
....................      #endif
....................    }
029E:  RETURN 0
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... // Uso de puertos digitales
.................... #use standard_io(a)
.................... //#use standard_io(b)
.................... #use standard_io(c)
.................... #use standard_io(d)
.................... 
.................... double SCALE = 36;
.................... float peso2=0;
.................... int r1,g1,b1=0;
.................... 
.................... unsigned int32 readCount(void){
....................   unsigned int32 data;
....................   unsigned int8 j;
....................   output_bit(DT1, 1);
*
02E4:  BSF    F8B.0
02E6:  BCF    F94.0
....................   output_bit(SCK, 0);
02E8:  BCF    F8B.1
02EA:  BCF    F94.1
....................   data = 0;
02EC:  CLRF   47
02EE:  CLRF   46
02F0:  CLRF   45
02F2:  CLRF   44
.................... 
....................   while (input(DT1));
02F4:  BSF    F94.0
02F6:  BTFSC  F82.0
02F8:  BRA    02F4
....................   for (j = 0; j < 24; j++){
02FA:  CLRF   48
02FC:  MOVF   48,W
02FE:  SUBLW  17
0300:  BNC   032E
....................     output_bit(SCK, 1);
0302:  BSF    F8B.1
0304:  BCF    F94.1
....................     data = data << 1;
0306:  BCF    FD8.0
0308:  RLCF   44,F
030A:  RLCF   45,F
030C:  RLCF   46,F
030E:  RLCF   47,F
....................     output_bit(SCK, 0);
0310:  BCF    F8B.1
0312:  BCF    F94.1
....................     if (input(DT1)){
0314:  BSF    F94.0
0316:  BTFSS  F82.0
0318:  BRA    032A
....................       data++;
031A:  MOVLW  01
031C:  ADDWF  44,F
031E:  BTFSC  FD8.0
0320:  INCF   45,F
0322:  BTFSC  FD8.2
0324:  INCF   46,F
0326:  BTFSC  FD8.2
0328:  INCF   47,F
....................     }
032A:  INCF   48,F
032C:  BRA    02FC
....................   }
....................   output_bit(SCK, 1);
032E:  BSF    F8B.1
0330:  BCF    F94.1
....................   data = data ^ 0x800000;
0332:  MOVLW  80
0334:  XORWF  46,F
....................   output_bit(SCK, 0);
0336:  BCF    F8B.1
0338:  BCF    F94.1
....................   return data;
033A:  MOVFF  44,00
033E:  MOVFF  45,01
0342:  MOVFF  46,02
0346:  MOVFF  47,03
034A:  GOTO   03EE (RETURN)
.................... }
.................... 
.................... int32 readAverage(void){
*
03DC:  CLRF   42
03DE:  CLRF   41
03E0:  CLRF   40
03E2:  CLRF   3F
....................   unsigned int32 sum = 0;
....................   for(int k = 0; k < 20; k++) {
03E4:  CLRF   43
03E6:  MOVF   43,W
03E8:  SUBLW  13
03EA:  BNC   0402
....................     sum += readCount();
03EC:  BRA    02E4
03EE:  MOVF   00,W
03F0:  ADDWF  3F,F
03F2:  MOVF   01,W
03F4:  ADDWFC 40,F
03F6:  MOVF   02,W
03F8:  ADDWFC 41,F
03FA:  MOVF   03,W
03FC:  ADDWFC 42,F
03FE:  INCF   43,F
0400:  BRA    03E6
....................   }
....................   sum /= 20;
0402:  BCF    FD8.1
0404:  MOVFF  42,4F
0408:  MOVFF  41,4E
040C:  MOVFF  40,4D
0410:  MOVFF  3F,4C
0414:  CLRF   53
0416:  CLRF   52
0418:  CLRF   51
041A:  MOVLW  14
041C:  MOVWF  50
041E:  RCALL  034E
0420:  MOVFF  03,42
0424:  MOVFF  02,41
0428:  MOVFF  01,40
042C:  MOVFF  00,3F
....................   return sum;
0430:  MOVFF  3F,00
0434:  MOVFF  40,01
0438:  MOVFF  41,02
043C:  MOVFF  42,03
0440:  RETURN 0
.................... }
.................... 
.................... float n;
.................... 
.................... /*
.................... // an array with 5 rows and 2 columns
.................... float n[5][2] = {{0,0}, //initializers for row indexed by 0
....................                  {1,2}, //initializers for row indexed by 1
....................                  {2,4}, //initializers for row indexed by 2
....................                  {3,6}, //initializers for row indexed by 3
....................                  {4,8}}; //initializers for row indexed by 4
.................... */
.................... 
.................... long Red,Green,Blue;
.................... // Inicializa el sensor de color TCS230
.................... void TCS230_init(void){
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);// Inicializa el timer 1 con un preer de 8
*
0226:  MOVLW  B5
0228:  MOVWF  FCD
022A:  GOTO   0D22 (RETURN)
.................... }
.................... 
.................... //
.................... void TSC230_clear(void){
....................    output_high(S2);
*
0476:  BCF    F95.6
0478:  BSF    F8C.6
....................    output_low(S3);
047A:  BCF    F95.7
047C:  BCF    F8C.7
....................    while(input_state(P_TCS230)){
047E:  BTFSS  F83.5
0480:  BRA    0484
0482:  BRA    047E
....................    }
....................    set_timer1(0); 
0484:  CLRF   FCF
0486:  CLRF   FCE
....................    while(!input_state(P_TCS230)){
0488:  BTFSC  F83.5
048A:  BRA    048E
048C:  BRA    0488
....................    }
048E:  RETURN 0
.................... }
.................... 
.................... // Matriz de pesos sinápticos
.................... float W[3]={-2.86667969,  173.98601737, -144.76813664};
.................... //Vector de polarización
.................... float b=-37.96316044;
.................... 
.................... //función escalón
.................... int hardlim(n){
....................    int value1,value2;
....................    if(n > 0){
*
0B50:  MOVF   4C,F
0B52:  BZ    0B5A
....................       value1 = 1;
0B54:  MOVLW  01
0B56:  MOVWF  4D
....................    }
0B58:  BRA    0B5C
....................    else{
....................       value1 = 0;
0B5A:  CLRF   4D
....................    }
....................    if(n > 0){
0B5C:  MOVF   4C,F
0B5E:  BZ    0B66
....................       value2 = 1;
0B60:  MOVLW  01
0B62:  MOVWF  4E
....................    }
0B64:  BRA    0B68
....................    else{
....................       value2 = 0;
0B66:  CLRF   4E
....................    }
....................    return value1,value2;
0B68:  MOVFF  4E,01
0B6C:  GOTO   0C70 (RETURN)
.................... }
.................... 
.................... //Mensaje de bienvenido
.................... void bienvenido(){
....................    lcd_gotoxy(1,1);
*
02C0:  MOVLW  01
02C2:  MOVWF  4E
02C4:  MOVWF  4F
02C6:  RCALL  022E
....................    printf(lcd_putc,"\f BIENVENIDO ");
02C8:  MOVLW  04
02CA:  MOVWF  FF6
02CC:  MOVLW  00
02CE:  MOVWF  FF7
02D0:  RCALL  02A0
....................    delay_ms(1000);
02D2:  MOVLW  04
02D4:  MOVWF  3F
02D6:  MOVLW  FA
02D8:  MOVWF  4E
02DA:  RCALL  0062
02DC:  DECFSZ 3F,F
02DE:  BRA    02D6
02E0:  GOTO   0D26 (RETURN)
.................... }
.................... 
.................... //leer color rojo (tipo de fotodiodo)
.................... int getRed(){
....................     TSC230_clear();
*
0490:  RCALL  0476
....................     long red=0;
0492:  CLRF   40
0494:  CLRF   3F
....................     output_low(S2);
0496:  BCF    F95.6
0498:  BCF    F8C.6
....................     output_low(S3);
049A:  BCF    F95.7
049C:  BCF    F8C.7
....................     while(input_state(P_TCS230)){}
049E:  BTFSC  F83.5
04A0:  BRA    049E
....................     set_timer1(0);
04A2:  CLRF   FCF
04A4:  CLRF   FCE
....................     while(!input_state(P_TCS230)){}
04A6:  BTFSS  F83.5
04A8:  BRA    04A6
....................     red = get_timer1();
04AA:  MOVF   FCE,W
04AC:  MOVWF  3F
04AE:  MOVFF  FCF,40
....................     return red;
04B2:  MOVFF  3F,01
04B6:  GOTO   0E40 (RETURN)
.................... }
.................... //leer color verde (tipo de fotodiodo)
.................... int getGreen(){
....................     TSC230_clear();
04BA:  RCALL  0476
....................     long green=0;
04BC:  CLRF   40
04BE:  CLRF   3F
....................     output_high(s2);
04C0:  BCF    F95.6
04C2:  BSF    F8C.6
....................     output_high(s3);
04C4:  BCF    F95.7
04C6:  BSF    F8C.7
....................     while(input_state(P_TCS230)){}
04C8:  BTFSC  F83.5
04CA:  BRA    04C8
....................     set_timer1(0);
04CC:  CLRF   FCF
04CE:  CLRF   FCE
....................     while(!input_state(P_TCS230)){}
04D0:  BTFSS  F83.5
04D2:  BRA    04D0
....................     green = get_timer1();
04D4:  MOVF   FCE,W
04D6:  MOVWF  3F
04D8:  MOVFF  FCF,40
....................     return green;
04DC:  MOVFF  3F,01
04E0:  GOTO   0E52 (RETURN)
.................... }
.................... //leer color azul (tipo de fotodiodo)
.................... int getBlue(){
....................     TSC230_clear();
04E4:  RCALL  0476
....................     long blue=0;
04E6:  CLRF   40
04E8:  CLRF   3F
....................     output_low(s2);
04EA:  BCF    F95.6
04EC:  BCF    F8C.6
....................     output_high(s3);
04EE:  BCF    F95.7
04F0:  BSF    F8C.7
....................     while(input_state(P_TCS230)){}
04F2:  BTFSC  F83.5
04F4:  BRA    04F2
....................     set_timer1(0);
04F6:  CLRF   FCF
04F8:  CLRF   FCE
....................     while(!input_state(P_TCS230)){}
04FA:  BTFSS  F83.5
04FC:  BRA    04FA
....................     blue = get_timer1();
04FE:  MOVF   FCE,W
0500:  MOVWF  3F
0502:  MOVFF  FCF,40
....................     return blue;
0506:  MOVFF  3F,01
050A:  GOTO   0E64 (RETURN)
.................... }
.................... 
.................... void perceptron(int Red_, int Green_, int Blue_){//, int W_
....................       int datos[3];//4
....................       //leemos la entrada de datos
....................       datos[0] = Red_,
....................       datos[1] = Green_;
*
0B70:  MOVFF  3F,42
0B74:  MOVFF  40,43
....................       datos[2] = Blue_;
0B78:  MOVFF  41,44
....................       //datos[3] = W_;
....................       int j = 0; 
....................       int perceptron = 0;
....................       float sum = 0;
0B7C:  CLRF   45
0B7E:  CLRF   46
0B80:  CLRF   4A
0B82:  CLRF   49
0B84:  CLRF   48
0B86:  CLRF   47
....................       while(j<3){
0B88:  MOVF   45,W
0B8A:  SUBLW  02
0B8C:  BNC   0C30
....................          sum += datos[j]*W[j]; //producto punto
0B8E:  CLRF   03
0B90:  MOVF   45,W
0B92:  ADDLW  42
0B94:  MOVWF  FE9
0B96:  MOVLW  00
0B98:  ADDWFC 03,W
0B9A:  MOVWF  FEA
0B9C:  MOVFF  FEF,50
0BA0:  MOVF   45,W
0BA2:  MULLW  04
0BA4:  MOVF   FF3,W
0BA6:  CLRF   03
0BA8:  ADDLW  19
0BAA:  MOVWF  FE9
0BAC:  MOVLW  00
0BAE:  ADDWFC 03,W
0BB0:  MOVWF  FEA
0BB2:  MOVFF  FEF,4C
0BB6:  MOVFF  FEC,4D
0BBA:  MOVFF  FEC,4E
0BBE:  MOVFF  FEC,4F
0BC2:  CLRF   51
0BC4:  BRA    0874
0BC6:  MOVFF  03,53
0BCA:  MOVFF  02,52
0BCE:  MOVFF  01,51
0BD2:  MOVFF  00,50
0BD6:  MOVFF  4F,57
0BDA:  MOVFF  4E,56
0BDE:  MOVFF  4D,55
0BE2:  MOVFF  4C,54
0BE6:  RCALL  05C8
0BE8:  MOVFF  FEA,51
0BEC:  MOVFF  FE9,50
0BF0:  BCF    FD8.1
0BF2:  MOVFF  4A,55
0BF6:  MOVFF  49,54
0BFA:  MOVFF  48,53
0BFE:  MOVFF  47,52
0C02:  MOVFF  03,59
0C06:  MOVFF  02,58
0C0A:  MOVFF  01,57
0C0E:  MOVFF  00,56
0C12:  RCALL  08AC
0C14:  MOVFF  51,FEA
0C18:  MOVFF  50,FE9
0C1C:  MOVFF  03,4A
0C20:  MOVFF  02,49
0C24:  MOVFF  01,48
0C28:  MOVFF  00,47
....................          j++;
0C2C:  INCF   45,F
0C2E:  BRA    0B88
....................       }
....................       perceptron = hardlim(sum+b);
0C30:  BCF    FD8.1
0C32:  MOVFF  4A,55
0C36:  MOVFF  49,54
0C3A:  MOVFF  48,53
0C3E:  MOVFF  47,52
0C42:  MOVFF  28,59
0C46:  MOVFF  27,58
0C4A:  MOVFF  26,57
0C4E:  MOVFF  25,56
0C52:  RCALL  08AC
0C54:  MOVFF  03,4E
0C58:  MOVFF  02,4D
0C5C:  MOVFF  01,4C
0C60:  MOVFF  00,4B
0C64:  BRA    0B16
0C66:  MOVFF  01,4B
0C6A:  MOVFF  01,4C
0C6E:  BRA    0B50
0C70:  MOVFF  01,46
....................       //se imprime el resultado
....................       lcd_gotoxy(1,1);
0C74:  MOVLW  01
0C76:  MOVWF  4E
0C78:  MOVWF  4F
0C7A:  CALL   022E
....................       if(perceptron == 1){
0C7E:  DECFSZ 46,W
0C80:  BRA    0C90
....................          printf(lcd_putc,"\f     MANZANA       ");
0C82:  MOVLW  12
0C84:  MOVWF  FF6
0C86:  MOVLW  00
0C88:  MOVWF  FF7
0C8A:  CALL   02A0
....................       }
0C8E:  BRA    0C9C
....................       else{
....................          printf(lcd_putc,"\f     PLATANO      ");
0C90:  MOVLW  28
0C92:  MOVWF  FF6
0C94:  MOVLW  00
0C96:  MOVWF  FF7
0C98:  CALL   02A0
....................       }
....................       delay_ms(1000);
0C9C:  MOVLW  04
0C9E:  MOVWF  4B
0CA0:  MOVLW  FA
0CA2:  MOVWF  4E
0CA4:  CALL   0062
0CA8:  DECFSZ 4B,F
0CAA:  BRA    0CA0
0CAC:  GOTO   0F52 (RETURN)
.................... }
.................... 
.................... 
.................... void main(){
0CB0:  CLRF   FF8
0CB2:  BCF    FD0.7
0CB4:  CLRF   07
0CB6:  CLRF   06
0CB8:  MOVLW  10
0CBA:  MOVWF  05
0CBC:  MOVLW  84
0CBE:  MOVWF  04
0CC0:  CLRF   0B
0CC2:  CLRF   0A
0CC4:  CLRF   09
0CC6:  CLRF   08
0CC8:  CLRF   0E
0CCA:  MOVLW  47
0CCC:  MOVWF  28
0CCE:  MOVLW  DA
0CD0:  MOVWF  27
0CD2:  MOVLW  97
0CD4:  MOVWF  26
0CD6:  MOVLW  84
0CD8:  MOVWF  25
0CDA:  CLRF   2A
0CDC:  CLRF   29
0CDE:  MOVF   FC1,W
0CE0:  ANDLW  C0
0CE2:  IORLW  0F
0CE4:  MOVWF  FC1
0CE6:  MOVLW  07
0CE8:  MOVWF  FB4
0CEA:  MOVLW  80
0CEC:  MOVWF  19
0CEE:  MOVLW  B7
0CF0:  MOVWF  1A
0CF2:  MOVLW  77
0CF4:  MOVWF  1B
0CF6:  MOVLW  AE
0CF8:  MOVWF  1C
0CFA:  MOVLW  86
0CFC:  MOVWF  1D
0CFE:  MOVLW  2D
0D00:  MOVWF  1E
0D02:  MOVLW  FC
0D04:  MOVWF  1F
0D06:  MOVLW  6C
0D08:  MOVWF  20
0D0A:  MOVLW  86
0D0C:  MOVWF  21
0D0E:  MOVLW  90
0D10:  MOVWF  22
0D12:  MOVLW  C4
0D14:  MOVWF  23
0D16:  MOVLW  A5
0D18:  MOVWF  24
....................    lcd_init(); //Inicializamos la lcd
0D1A:  GOTO   01AA
....................    TCS230_init();
0D1E:  GOTO   0226
....................    //set_tris_a(0xFF);
....................    //s0->vcc
....................    //s1->gnd
....................    //sensor de color
....................    //20 %
....................    
....................    bienvenido();
0D22:  GOTO   02C0
....................    printf(lcd_putc, "\f Iniciando...");
0D26:  MOVLW  3C
0D28:  MOVWF  FF6
0D2A:  MOVLW  00
0D2C:  MOVWF  FF7
0D2E:  CALL   02A0
....................    unsigned int32 read1 = 0, offset = 0; //
....................    float gram = 0;
0D32:  CLRF   2E
0D34:  CLRF   2D
0D36:  CLRF   2C
0D38:  CLRF   2B
0D3A:  CLRF   32
0D3C:  CLRF   31
0D3E:  CLRF   30
0D40:  CLRF   2F
0D42:  CLRF   36
0D44:  CLRF   35
0D46:  CLRF   34
0D48:  CLRF   33
....................    offset = readAverage();
0D4A:  CALL   03DC
0D4E:  MOVFF  03,32
0D52:  MOVFF  02,31
0D56:  MOVFF  01,30
0D5A:  MOVFF  00,2F
....................    //delay_ms(2000);
....................    
....................    while(TRUE){
....................       lcd_gotoxy(1,1);
0D5E:  MOVLW  01
0D60:  MOVWF  4E
0D62:  MOVWF  4F
0D64:  CALL   022E
....................       printf(lcd_putc,"\f  Coloque\n  la fruta");
0D68:  MOVLW  4C
0D6A:  MOVWF  FF6
0D6C:  MOVLW  00
0D6E:  MOVWF  FF7
0D70:  CALL   02A0
....................       //delay_ms(2000);
....................       //peso2 = 0;
....................       
....................       read1 = readAverage();
0D74:  CALL   03DC
0D78:  MOVFF  03,2E
0D7C:  MOVFF  02,2D
0D80:  MOVFF  01,2C
0D84:  MOVFF  00,2B
....................       if (offset >= read1) {
0D88:  MOVF   2E,W
0D8A:  SUBWF  32,W
0D8C:  BNC   0DF2
0D8E:  BNZ   0DA6
0D90:  MOVF   2D,W
0D92:  SUBWF  31,W
0D94:  BNC   0DF2
0D96:  BNZ   0DA6
0D98:  MOVF   2C,W
0D9A:  SUBWF  30,W
0D9C:  BNC   0DF2
0D9E:  BNZ   0DA6
0DA0:  MOVF   2B,W
0DA2:  SUBWF  2F,W
0DA4:  BNC   0DF2
....................          float val1 = (offset - read1);
0DA6:  MOVF   2B,W
0DA8:  SUBWF  2F,W
0DAA:  MOVWF  00
0DAC:  MOVF   2C,W
0DAE:  SUBWFB 30,W
0DB0:  MOVWF  01
0DB2:  MOVF   2D,W
0DB4:  SUBWFB 31,W
0DB6:  MOVWF  02
0DB8:  MOVF   2E,W
0DBA:  SUBWFB 32,W
0DBC:  MOVWF  03
0DBE:  MOVWF  42
0DC0:  MOVFF  02,41
0DC4:  MOVFF  01,40
0DC8:  MOVFF  00,3F
0DCC:  CALL   0442
0DD0:  MOVFF  03,3A
0DD4:  MOVFF  02,39
0DD8:  MOVFF  01,38
0DDC:  MOVFF  00,37
....................          gram = val1;
0DE0:  MOVFF  3A,36
0DE4:  MOVFF  39,35
0DE8:  MOVFF  38,34
0DEC:  MOVFF  37,33
....................       }
0DF0:  BRA    0E3C
....................       
....................       else{
....................          float val2 = (read1 - offset);
0DF2:  MOVF   2F,W
0DF4:  SUBWF  2B,W
0DF6:  MOVWF  00
0DF8:  MOVF   30,W
0DFA:  SUBWFB 2C,W
0DFC:  MOVWF  01
0DFE:  MOVF   31,W
0E00:  SUBWFB 2D,W
0E02:  MOVWF  02
0E04:  MOVF   32,W
0E06:  SUBWFB 2E,W
0E08:  MOVWF  03
0E0A:  MOVWF  42
0E0C:  MOVFF  02,41
0E10:  MOVFF  01,40
0E14:  MOVFF  00,3F
0E18:  CALL   0442
0E1C:  MOVFF  03,3E
0E20:  MOVFF  02,3D
0E24:  MOVFF  01,3C
0E28:  MOVFF  00,3B
....................          gram = val2;
0E2C:  MOVFF  3E,36
0E30:  MOVFF  3D,35
0E34:  MOVFF  3C,34
0E38:  MOVFF  3B,33
....................       }
....................       
....................       
....................       // Lectura para el color rojo
....................       Red = getRed();
0E3C:  GOTO   0490
0E40:  CLRF   14
0E42:  MOVFF  01,13
....................       delay_ms(250);
0E46:  MOVLW  FA
0E48:  MOVWF  4E
0E4A:  CALL   0062
....................       // Lectura para el color verde
....................       Green = getGreen();
0E4E:  GOTO   04BA
0E52:  CLRF   16
0E54:  MOVFF  01,15
....................       delay_ms(250);
0E58:  MOVLW  FA
0E5A:  MOVWF  4E
0E5C:  CALL   0062
....................       // Lectura para el color azul
....................       Blue = getBlue();
0E60:  GOTO   04E4
0E64:  CLRF   18
0E66:  MOVFF  01,17
....................       delay_ms(250);
0E6A:  MOVLW  FA
0E6C:  MOVWF  4E
0E6E:  CALL   0062
....................       
....................       //imprimir datos en pantalla
....................       lcd_gotoxy(1,1);
0E72:  MOVLW  01
0E74:  MOVWF  4E
0E76:  MOVWF  4F
0E78:  CALL   022E
....................       printf(lcd_putc,"\f");
0E7C:  MOVLW  0C
0E7E:  MOVWF  4D
0E80:  CALL   0250
....................       printf(lcd_putc,"R:%Lu", Red);
0E84:  MOVLW  52
0E86:  MOVWF  4D
0E88:  CALL   0250
0E8C:  MOVLW  3A
0E8E:  MOVWF  4D
0E90:  CALL   0250
0E94:  MOVLW  10
0E96:  MOVWF  FE9
0E98:  MOVFF  14,40
0E9C:  MOVFF  13,3F
0EA0:  CALL   050E
....................       lcd_gotoxy(1,2);
0EA4:  MOVLW  01
0EA6:  MOVWF  4E
0EA8:  MOVLW  02
0EAA:  MOVWF  4F
0EAC:  CALL   022E
....................       printf(lcd_putc,"G:%Lu", Green);
0EB0:  MOVLW  47
0EB2:  MOVWF  4D
0EB4:  CALL   0250
0EB8:  MOVLW  3A
0EBA:  MOVWF  4D
0EBC:  CALL   0250
0EC0:  MOVLW  10
0EC2:  MOVWF  FE9
0EC4:  MOVFF  16,40
0EC8:  MOVFF  15,3F
0ECC:  CALL   050E
....................       lcd_gotoxy(8,1);
0ED0:  MOVLW  08
0ED2:  MOVWF  4E
0ED4:  MOVLW  01
0ED6:  MOVWF  4F
0ED8:  CALL   022E
....................       printf(lcd_putc,"B:%Lu", Blue);
0EDC:  MOVLW  42
0EDE:  MOVWF  4D
0EE0:  CALL   0250
0EE4:  MOVLW  3A
0EE6:  MOVWF  4D
0EE8:  CALL   0250
0EEC:  MOVLW  10
0EEE:  MOVWF  FE9
0EF0:  MOVFF  18,40
0EF4:  MOVFF  17,3F
0EF8:  CALL   050E
....................       
....................       lcd_gotoxy(8,2);
0EFC:  MOVLW  08
0EFE:  MOVWF  4E
0F00:  MOVLW  02
0F02:  MOVWF  4F
0F04:  CALL   022E
....................       printf(lcd_putc, "W:%f", gram);
0F08:  MOVLW  57
0F0A:  MOVWF  4D
0F0C:  CALL   0250
0F10:  MOVLW  3A
0F12:  MOVWF  4D
0F14:  CALL   0250
0F18:  MOVLW  89
0F1A:  MOVWF  FE9
0F1C:  MOVFF  36,42
0F20:  MOVFF  35,41
0F24:  MOVFF  34,40
0F28:  MOVFF  33,3F
0F2C:  MOVLW  02
0F2E:  MOVWF  43
0F30:  GOTO   06FA
....................       //printf(lcd_putc, "\f%f", gram / SCALE);
....................       delay_ms(5000);
0F34:  MOVLW  14
0F36:  MOVWF  3F
0F38:  MOVLW  FA
0F3A:  MOVWF  4E
0F3C:  CALL   0062
0F40:  DECFSZ 3F,F
0F42:  BRA    0F38
....................       
....................       perceptron(Red,Green,Blue);
0F44:  MOVFF  13,3F
0F48:  MOVFF  15,40
0F4C:  MOVFF  17,41
0F50:  BRA    0B70
....................       delay_ms(5000);      
0F52:  MOVLW  14
0F54:  MOVWF  3F
0F56:  MOVLW  FA
0F58:  MOVWF  4E
0F5A:  CALL   0062
0F5E:  DECFSZ 3F,F
0F60:  BRA    0F56
0F62:  BRA    0D5E
....................      // r1=Red;
....................      // g1=Green;
....................      // b1=Blue;
....................       
....................       
....................    }
.................... }
.................... 
0F64:  SLEEP 
.................... 

Configuration Fuses:
   Word  1: C000   PLL1 CPUDIV1 NOUSBDIV XT FCMEN IESO
   Word  2: 1E26   PUT BROWNOUT VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
