#include <Pueb.h>

#use standard_io(B)
#use standard_io(D)

#define LCD_ENABLE_PIN PIN_B0
#define LCD_RS_PIN PIN_B1
#define LCD_RW_PIN PIN_B2
#define LCD_DATA4 PIN_B4
#define LCD_DATA5 PIN_B5
#define LCD_DATA6 PIN_B6
#define LCD_DATA7 PIN_B7

#define DT1 pin_c0
#define SCK pin_c1

#define P_TCS230 PIN_D5
#define S2 PIN_D6
#define S3 PIN_D7
#include <TCS230.c>
#include <lcd.c>

long red = 0;
long green = 0;
long blue = 0;

float SCALE = 230.32;
float gram = 0;
float peso = 0;

float W[4]={4863.8740951,-6632.90002851,5488.70411404,-228.33282201};
float b = -14660.7421644;

int comb[4]={0,0,0,0};

/*
void obt_comb(){

      num[0] = input(PIN_A0);
      num[1] = input(PIN_A1);
      num[2] = input(PIN_A2);
      num[3] = input(PIN_A3);
      num[4] = input(PIN_A4);
      num[5] = input(PIN_A5);
      num[6] = input(PIN_B3);
      
      output_bit(PIN_C0, num[0]);
      output_bit(PIN_C1, num[1]);
      output_bit(PIN_C2, num[2]);
      output_bit(PIN_C3, num[3]);
      output_bit(PIN_C4, num[4]);
      output_bit(PIN_C5, num[5]);
      output_bit(PIN_C6, num[6]);
}
*/

int hardlim(float n){
   int value;
   if(n>0){
      value=1;
   }
   else{
      value=0;
   }
   return value;
}



unsigned int32 readCount(void) {
  unsigned int32 data;
  unsigned int8 j;
  output_bit(DT1, 1);
  output_bit(SCK, 0);
  data = 0;

  while (input(DT1));
  for (j = 0; j < 24; j++) {
    output_bit(SCK, 1);
    data = data << 1;
    output_bit(SCK, 0);
    if (input(DT1)) {
      data++;
    }
  }
  output_bit(SCK, 1);
  data = data ^ 0x800000;
  output_bit(SCK, 0);
  return data;
}

int32 readAverage(void) {
  unsigned int32 sum = 0;
  for (int k = 0; k < 20; k++) {
    sum = sum + readCount();
  }
  sum = sum / 20;
  return sum;
}

void main()
{
   lcd_init();
   TCS230_init();

   unsigned int32 read1 = 0, offset = 0;
   offset = readAverage();
   
   while(true)
   {
      read1 = readAverage();
      if (offset >= read1) {
        float val1 = (offset - read1);
        gram = val1;
      } else {
        float val2 = (read1 - offset);
        gram = val2;
      }
      peso = gram / SCALE;

      red = TCS230_getFrequence_red();                  // Lectura para el color rojo
      green = TCS230_getFrequence_green();              // Lectura para el color verde
      blue = TCS230_getFrequence_blue();                // Lectura para el color azul
      
      comb[0] = red;
      comb[1] = green;
      comb[2] = blue;
      comb[3] = peso;
      
      printf(lcd_putc, "\f");
      lcd_gotoxy(1,1);
      printf(lcd_putc,"R: %Lu", red);
      lcd_gotoxy(1,2);
      printf(lcd_putc,"G: %Lu", green);
      lcd_gotoxy(9,1);
      printf(lcd_putc,"B: %Lu", blue);
      lcd_gotoxy(8,2);
      printf(lcd_putc, "W:%f", peso);
      delay_ms(1000);
      
      float sum=0;
      int perceptron=0;   
      j=0;
         
      while(j<4){
         sum += comb[j]*W[j];
         j++;
      }
         
      perceptron = hardlim(sum+b);
         
      if(perceptron==1){
         lcd_gotoxy(1,1);
         printf(lcd_putc,"\fSi es par");
         delay_ms(1000);
      }
      
      
   }
}
